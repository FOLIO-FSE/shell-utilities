auth 2>/dev/null || authn 2>/dev/null
# Script expects a delimited file with name of agreement in first column and name of license in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A agreement_dict
declare -A license_dict

automatic_match="no"
infile="agreement-license.tsv"

all_agreements=""
all_licenses=""

offset=0
recsretrieved=100

if [[ ${automatic_match} == "yes" ]];then 
	echo "Automatch enabled. Ignoring input files"
fi

# retrieve all agreements and add to array
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/erm/sas?perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Agreements retrieved\r" $totalrecs

	all_agreements="${all_agreements}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Agreements retrieved"

# load agreements into scalar array keyed by downcased name
eval "$(echo ${all_agreements} |jq -r '. | @sh "agreement_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing Agreement keys"
# normalize keys
regex="[\'\"\\/\\\| ]"

for key in "${!agreement_dict[@]}";do
	newkey=${key//${regex}/}
	agreement_dict[${newkey}]=${agreement_dict["${key}"]}
done

offset=0
recsretrieved=100

# retrieve all records
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/licenses/licenses?sort=name%3Bdesc&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Licenses retrieved\r" $totalrecs

	all_licenses="${all_licenses}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Licenses retrieved"

# load licenses into scalar array keyed by downcased name
eval "$(echo ${all_licenses} |jq -r '. | @sh "license_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing License keys"
# normalize keys
for key in "${!license_dict[@]}";do
	newkey=${key//${regex}/}
	license_dict[${newkey}]=${license_dict["${key}"]}

	if [[ ${automatic_match} == "yes" ]];then 
		agreement_record="${agreement_dict[${newkey}]}"

		# check to see if license exists with same name. If so, link the Agreement
		if [[ ${agreement_record} =~ [a-z0-9A-Z] ]];then
			agreement_uuid=$(echo ${agreement_record} |jq -r .id)
			license_uuid=$(echo ${license_dict["${key}"]} |jq -r .id)

			record=$(echo "${agreement_record}" | jq ".linkedLicenses += [{\"_delete\": false, \"amendments\": [], \"remoteId\": \"${license_uuid}\", \"status\": \"controlling\" }]")
			curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/erm/sas/${agreement_uuid}"
		fi
	fi
done

if [[ ${automatic_match} == "yes" ]];then 
	echo "Exiting without processing file due to automatch"
	exit
fi

# attach license 

while IFS=$'\t' read -r agreement license status;do
	echo "Processing ${license}"
	status=${status,,}
	compareagreementkey=${agreement//${regex}/}
	compareagreementkey="${compareagreementkey,,}"
	agreement_record="${agreement_dict[$compareagreementkey]}"

	comparelicensekey=${license//${regex}/}
	comparelicensekey=${license,,}
	license_record="${license_dict[$comparelicensekey]}"

	if [[ ${agreement_record} =~ [a-z0-9A-Z] ]];then
		agreement_uuid=$(echo ${agreement_record} |jq -r .id)
		 if [[ ${license_record} =~ [a-z0-9A-Z] ]];then
			license_uuid=$(echo ${license_record} |jq -r .id)
			# fix json and PUT
			record=$(echo "${agreement_record}" | jq ".linkedLicenses += [{\"_delete\": false, \"amendments\": [], \"remoteId\": \"${license_uuid}\", \"status\": \"${status}\" }]")
	
			curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/erm/sas/${agreement_uuid}"
		else
			echo "${license} License not found"
		fi
	else 
		echo "${agreement} Agreement not found"
	fi
	
done < ${infile}


#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A packages_dict


infile="agreementnames" # expects agreement names to be exactly the same as package names
outfile="packages.log"
rm -f ${outfile}

echo "Retrieving agreements"
records-get agreements
echo "Retrieving packages"
records-get packages

all_packages="$(<packages.json)"
all_agreements="$(<agreements.json)"

create_agreementline() {

IFS='' read -r -d '' agreementline << EndOfAgreementLine
{
	"type":"external",
	"authority":"ekb-package",
	"reference":"${package_id}",
	"owner":"${agreement_uuid}"
}
EndOfAgreementLine

echo "${agreementline}"
}


while IFS=$'\n' read -r agreement_name;do 
	echo "Processing ${agreement_name}"
	package_id=$(jq -r --arg NAME "${agreement_name}" 'select(.attributes.name == $NAME) |.id' <<< "${all_packages}")
	agreement_uuid=$(jq -r --arg NAME "${agreement_name}" 'select(.name == $NAME) |.id' <<< "${all_agreements}")
	
	agreement_line=$(create_agreementline)

	if [[ ${#package_id} -gt 1 ]];then	
		apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${agreement_line}" "${okapi_url}/erm/entitlements")

		echo "${apicall}" >> ${outfile}
	else
		echo "No package matching ${agreement_name} can be found"
	fi

	echo "${apicall}"
	counter=$((counter + 1))
done < ${infile}



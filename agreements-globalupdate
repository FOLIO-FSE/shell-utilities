auth 2>/dev/null || authn 2>/dev/null
# Script expects a delimited file with name of agreement in first column and name of license in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A agreement_dict
declare -A license_dict

all_agreements=""

offset=0
recsretrieved=100

# retrieve all agreements and add to array
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/erm/sas?query=cql.allRecords=1&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Agreements retrieved\r" $totalrecs

	all_agreements="${all_agreements}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Agreements retrieved"

# load agreements into scalar array keyed by downcased name
eval "$(echo ${all_agreements} |jq -r '. | @sh "agreement_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

counter=1

for agreement in "${agreement_dict[@]}";do
	org_name=$(echo ${agreement} |jq  'select(.orgs[0].org.name != null) | .orgs[0].org.name')
	agreement_uuid=$(echo ${agreement} |jq -r '.id')
	agreement_name=$(echo ${agreement} |jq -r '.name')

	echo "Processing ${agreement_name} -- record $counter of $totalrecs"
	
	if [[ ${org_name,,} =~ [0-9a-z] ]];then
		agreement=$(echo ${agreement} |jq  '.orgs[0].primaryOrg = true')
		curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${agreement}" "${okapi_url}/erm/sas/${agreement_uuid}"
	else
		echo "Record not updated, match criteria not met"
	fi

	counter=$(($counter + 1))
done


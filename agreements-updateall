#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
# Script expects a delimited file with name of agreement in first column and name of organization in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A agreement_dict
declare -a key_arr

all_agreements=""

offset=0
recsretrieved=100

# retrieve all agreements and add to array
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/erm/sas?perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Agreements retrieved\r" $totalrecs

	all_agreements="${all_agreements}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Agreements retrieved"

# load agreements into scalar array and correct string
eval "$(echo ${all_agreements} | sed 's/primaryOrg\": false/primaryOrg\": true/g' |jq -r '. | @sh "agreement_dict[\(.id)]=\(.|tostring)"')" 

# build key array to iterate through
for key in ${!agreement_dict[@]};do
	key_arr+=(${key})
done

for agreement_uuid in ${key_arr[@]};do
	record=$(echo "${agreement_dict[$agreement_uuid]}" |jq '.orgs[].roles[0]={"_delete": false,"role": {"id": "2c9180867dbf118b017de20776fe0001"}}')
	curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/erm/sas/${agreement_uuid}"
done
	

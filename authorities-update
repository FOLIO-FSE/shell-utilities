auth 2>/dev/null || authn 2>/dev/null
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile=infile # expects UUID + value
outfile=marc_update.log

SECONDS=0
counter=0
numrecs=$(wc -l ${infile} |cut -d " " -f1)

batchsize=2

rm -f ${outfile}

if [[ -z ${infile} ]];then echo "The input file ${infile} could not be found";exit;fi

add_field() {
	local authority_uuid="${1}"
	local seq="${2}"
	local value="${3}"
	local record
	local version
	local parsedRecordId
	local newfield


	tag="035"
	content=" \$a ${value}"
	#content="${value}"

	newfield='[{ "tag": "'${tag}'", "content": "\$a '${value}'", "indicators": [ "\\", "\\" ], "isProtected": false }]'

	record=$(curl -s -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/records-editor/records?externalId=${authority_uuid}") 

	version=$(curl -s -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/authority-storage/authorities/${authority_uuid}" |jq -r ._version) 

	parsedRecordId=$(echo "${record}" | jq -r .parsedRecordId)
	# add related record version
	record=$(echo "${record}" |jq --arg VERSION ${version} '.relatedRecordVersion = $VERSION')

	# add new field
	#record=$(echo "${record}" |jq --arg VERSION ${version} --argjson NEWFIELD "${newfield}" '.relatedRecordVersion = $VERSION | (.fields= .fields + $NEWFIELD)')

	#replace field content 
	#record=$(echo "${record}" |jq --arg VERSION ${version} --arg TAG ${tag} --arg CONTENT "${content}" '.relatedRecordVersion = $VERSION | .fields[] | select(.tag == $TAG).content = $CONTENT')

	# formula to get index of affected tag
	index=$(echo "${record}" |jq --arg TAG ${tag} '[ .fields[].tag ] |index($TAG)' )

	# sets whole tag
	#record=$(echo "${record}" |jq --arg VERSION ${version} --arg INDEX ${index} --arg TAG ${tag} --arg CONTENT "${content}" '.relatedRecordVersion = $VERSION | .fields[$INDEX |tonumber].content = $CONTENT')

	# must capture individual array element affected and just set that
	# appends content to existing tag
	#record=$(echo "${record}" |jq --arg VERSION ${version} --arg INDEX ${index} --arg TAG ${tag} --arg CONTENT "${content}" '.relatedRecordVersion = $VERSION | .fields[$INDEX |tonumber].content =  (.content|tostring) + $CONTENT')
	
	curl --http1.1 -s -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/records-editor/records/${parsedRecordId}" > tmp_authoritiesupdate.${seq}

}

counter=0
SECONDS=1

while mapfile -t -n ${batchsize} lines && ((${#lines[@]})); do 
	seq=0
	for line in "${lines[@]}";do
		IFS=$'\t' read -r authority_uuid value <<< "${line}"

		add_field "${authority_uuid}" "${seq}" "${value}" 

		counter=$((counter + 1))
		seq=$((seq + 1))
	done
	wait

	cat tmp_authoritiesupdate.* >> ${outfile} 2>/dev/null
	rm -f tmp_authoritiesupdate.*

        TIME=$SECONDS;msg="$SECONDS seconds"
        if [[ $SECONDS -gt 60 ]];then TIME=$(bc <<< "scale=1;$SECONDS/60");msg="$TIME minutes";fi
        if [[ $SECONDS -gt 3600 ]];then TIME=$(bc <<< "scale=1;$SECONDS/3600");msg="$TIME hours     ";fi
	
	echo -en "Processing record $counter of $numrecs in $msg\r"

done < ${infile}

echo "Processed record $counter of $numrecs in $msg          "

#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

workingdir=$(pwd)
#profileName="MelCat DCB Export FINAL"
profileName="Default instances export job profile"

fromDate=$(date -I --date '1 month ago')
toDate=$(date -I)

idfile="search.cql"

echo "(metadata.createdDate>=\"${fromDate}\" and metadata.createdDate<=\"${toDate}\")" > ${idfile}

errors=0
status=""
SECONDS=0
OFFSET=0

upload_file() {
	idfile="$1"

	apicall=$(curl --http1.1 -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-export/job-profiles?limit=1000")

	jobProfileId=$(echo "${apicall}" |jq -r ".jobProfiles[] | select(.name==\"${profileName}\") | .id")

	if ! [[ $jobProfileId =~ [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12} ]]; then
		echo "No valid profile found. Exiting."
		exit
	fi

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "{\"fileName\": \"${idfile}\", \"uploadFormat\":\"cql\"}" "${okapi_url}/data-export/file-definitions")

	fileDefinitionId=$(echo ${apicall} |jq -r .id)	
	jobExecutionId=$(echo ${apicall} |jq -r .jobExecutionId)
	echo "${jobExecutionId}" > ${workingdir}/.jobid
	echo "${fileDefinitionId}" > ${workingdir}/.fileid

	apicall=$(curl --http1.1 -s -w '\n' -X POST  -H "Content-type: application/octet-stream" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" --data-binary @${idfile} "${okapi_url}/data-export/file-definitions/${fileDefinitionId}/upload")

	payload="{\"fileDefinitionId\": \"${fileDefinitionId}\", \"jobProfileId\": \"${jobProfileId}\", \"idType\": \"instance\"}"
	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${payload}" "${okapi_url}/data-export/export")

	echo "${apicall}"
}

process_file() {
	idfile="${1}"

	upload_file "${idfile}"
	checkfile=""

	while [[ ! ${checkfile} =~ [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12} ]];do
		if [[ $SECONDS -gt 500 ]]; then
			auth 2>/dev/null || authn 2>/dev/null
			okapi_token=$(cat okapi.token)
			SECONDS=1
			OFFSET=$(($OFFSET + 1))
		fi

		TIMER=$(($OFFSET * 500 + $SECONDS))

		sleep 5
		jobExecutionId=$(cat "${workingdir}/.jobid")
		apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-export/job-executions?query=id==${jobExecutionId}" |jq '.jobExecutions[0]') 
		status=$(echo ${apicall} |jq -r .status)
		checkfile=$(echo ${apicall} |jq -r '.exportedFiles[0].fileId')
	done

	exported=$(echo "${apicall}" |jq -r .progress.exported)
	failed=$(echo "${apicall}" |jq -r .progress.failed)
	total=$(echo "${apicall}" |jq -r .progress.total)
	status=$(echo "${apicall}" |jq -r .status)
	fileId=$(echo "${apicall}" |jq -r '.exportedFiles[0].fileId')
	fileName=$(echo "${apicall}" |jq -r '.exportedFiles[0].fileName')

	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-export/job-executions/${jobExecutionId}/download/${fileId}") 
	link=$(echo ${apicall} |jq -r .link)

	echo "Status: ${status} Exported: ${exported} Failed: ${failed}: Total: ${total}	JobId: $jobExecutionId"
	curl -w '\n' -o "${workingdir}/${fileName}" -X GET -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${link}" 
	echo "Output sent to ${fileName}"

}

echo "Processing ${idfile}"

output=$(process_file "${idfile}")
echo "${output}"

TIME=$TIMER;msg="$TIMER seconds"
if [[ $TIMER -gt 60 ]];then TIME=$(($TIMER/60));msg="$TIME minutes";fi
if [[ $TIMER -gt 3600 ]];then TIME=$(($TIMER/3600));msg="$TIME hours";fi

echo "Processing ${msg} elapsed"



	

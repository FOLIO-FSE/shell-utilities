args=("$@")

infile="${args[0]}"
knownprocesses=("currency" "dateiso8" "merge" "prefix" "regexrepl" "repl" "suffix")

fileroot=$(echo "${infile}" | sed 's/\.....\?$//')
fileextension=$(echo "${infile}" | sed 's/.*\(\..*\)$/\1/')

if [[ ${fileroot} == ${fileextension} ]];then fileextension="";fi

outfile="${fileroot}_fixed${fileextension}"
awkfile=".${fileroot}.awk"

fixfieldarr=("${args[@]:1}")
numfix=${#fixfieldarr[@]}

fixfields="${fixfieldarr[0]}"

for (( i=1; i<numfix; i++ ));do
	fixfields="${fixfields}"$'\x1f'"${fixfieldarr[i]}"
done

for (( i=0; i<numfix; i++ ));do
	process="${fixfieldarr[i]/|*/}"
	foundprocess=0

	for j in ${knownprocesses[@]};do
		if [[ ${j} == ${process} ]];then foundprocess=1;fi
	done

	if [[ $foundprocess -eq 0 ]]; then
		echo "${process} not found. Known processes are: "
		echo "${knownprocesses[@]}"
		exit
	fi
done

if [[ ! -f ${infile} ]];then 
	if [[ ${#infile} -eq 0 ]];then infile="File";fi
	echo
	echo "${infile} not found"
	echo "Usage: fieldfix [filename] 'process1|field1|params|options' 'process2|field2|params'"
	echo
	echo "Multiple parameters or options should be subdelimited by forward slashes"
	echo
	echo "Use parentheses and double slashes for capture groups"
	echo 
	echo "e.g. fieldfix [filename] 'currency|field1' 'dateiso8|field2' ..."
	echo "e.g. fieldfix [filename] 'merge|field2|field2/field3/field4|delimiter' 'dateiso8|field2'..."
	echo "e.g. fieldfix [filename] 'prefix|field1|.b' 'dateiso8|field2'..."
	echo "e.g. fieldfix [filename] 'repl|field1|searchexpr/replaceexpr' 'dateiso8|field2'..."
	echo "e.g. fieldfix [filename] 'regexrepl|field1|search(capturegroup1)/\\\1' 'dateiso8|field2' ..."
	echo
	exit
fi

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f

BEGIN {
	FS=OFS="\t"
	split(FIELDLIST, fixfields, SFS)
	numfields=length(fixfields)

	for (i = 1; i <= numfields; i++) {
		fixprocess = fixfields[i]

		# clear for each field
		for (j = 1; j <= 3; j++) {
			fixcomponents[j] = ""
			param[j] = ""
		}

		split(fixprocess, fixcomponents, "|")

		fixtype[i] = fixcomponents[1]
		header[i] = fixcomponents[2]
		params[i] = fixcomponents[3]
		options[i] = fixcomponents[4]
		split(params[i], param, "/")
		param1[i] = param[1]
		param2[i] = param[2]
		param3[i] = param[3]
	}
}

function currency(bad_field) {
	gsub(/[^0-9\.]/, "", $bad_field)
	$bad_field = sprintf("%.2f", $bad_field)
}

function dateiso8(bad_field) {
	if ($bad_field ~ /^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/) {
		$bad_field = substr($bad_field, 1, 4)"-"substr($bad_field, 5, 2)"-"substr($bad_field, 7, 2)
	}
	if ($bad_field == "NEVER") {
		$bad_field = "2099-12-31"
	}
}

function merge(bad_field) {
	# params precalculated earlier
	mergecompare = tolower(params[fixfield])
	delimiter = options[fixfield]

	gsub(/[^a-z0-9\/]/, "", mergecompare)

	num_merge = split(mergecompare, mergeparams, "/")

	for (mergeparam = 1; mergeparam <= num_merge; mergeparam++) {
		mergeheader = mergeparams[mergeparam]
		mergefield = firstrow[mergeheader]
		if ($mergefield != "") {
			$bad_field = $bad_field""delimiter""$mergefield
		}
	}
	$bad_field = substr($bad_field, 1, length($badfield) - 2)
}

function prefix(bad_field) {
	$bad_field = param1[fixfield]""$bad_field
}

function regexrepl(bad_field) {
	$bad_field = gensub(param1[fixfield], param2[fixfield], "g", $bad_field)
}

function repl(bad_field) {
	sub(param1[fixfield], param2[fixfield], $bad_field)
}

function suffix(bad_field) {
	$bad_field = $bad_field""param1[fixfield]
}

{
	lineout=""

	if (NR == 1) {
		print $0 > OUTFILE

		# convert fieldnames to positional numbers
		for (field = 1; field <= numfields; field++) {
			for (i = 1; i <= NF; i++) { 
				compareheader=tolower($i)	
				gsub(/[^a-z0-9]/, "", compareheader)
				firstrow[compareheader] = i
	
				comparefield=tolower(header[field])
				gsub(/[^a-z0-9]/, "", comparefield)

				if (compareheader == comparefield) {
					header[field] = i
					print $i" will be fixed"
				}
			}
		}
	} else {
		for (fixfield = 1; fixfield <= numfields; fixfield++) {
			fixfunction=fixtype[fixfield]
			@fixfunction(header[fixfield])
		}

		for(i=1;i<=NF;i++) { printf("%s%s",$i,i==NF?RS:OFS) > OUTFILE }

		if (NR % 10000 == 0){ printf "Records processed: "NR"\r" }
	}
}

END { print NR" records have been processed and sent to "OUTFILE }

ENDOFAWK

echo -e "${awkscript}" > "${awkfile}"
chmod 700 "${awkfile}"

awk -v FIELDLIST="${fixfields}" -v SFS=$'\x1f' -v OUTFILE="${outfile}" -f "${awkfile}" "${infile}"

rm "${awkfile}"

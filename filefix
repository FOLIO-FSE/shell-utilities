filelist=("$@")
infile="${filelist[0]}"

rm -f *_bad filefixa*

if [[ ${filelist[-1]} == "us-single" ]]; then
	unset 'filelist[${#filelist[@]}-1]'
	dateformat="us-single"
fi
if [[ ${filelist[-1]} == "uk-single" ]]; then
	unset 'filelist[${#filelist[@]}-1]'
	dateformat="uk-single"
fi

if [[ -z ${infile} ]];then echo "You must supply a file name or expression (wildcards OK). Usage: filefix [filename]";fi

if [[ -z $1 ]];then
	echo "This tool converts csv data to tsv, performs basic cleaning, and does field frequency counts "
	echo "It detects date formats and converts MM-DD-YYYY and DD-MM-YYYY dates to YYYY-MM-DD. "
	echo 
	echo "Usage: filefix [filename]"
	echo
	exit
else
	infile=${1}
fi


fix_characters(){
	local file=${1}
	sed -i "
	s/['\"];['\"]/;/g
	s/[$SINGLE]/'/g
	s/[$DOUBLE]/\"/g
	s/[$NBSP]/ /g
	s/[$CONTROL]/ /g
	s/\";\"/;/g
	s/^\"\|\"$//g
	s/^\"//
	s/\"$//
	s/\"\?\t\"\?/\t/g
	s/\(^\|\t\)null\(\t\|$\)/\1\2/ig
	" ${file}
}

fix_dos(){
	local oldfile="${1}old"
	local fixedfile="${1}"
	cp ${fixedfile} ${oldfile}
	awk 'BEGIN{FS="\t";RS=ORS="\n"}{if ($numfields !~ /\r$/){print $0"\r"}else print $0}' ${oldfile} > "${fixedfile}"
	cp ${fixedfile} ${oldfile}

	# normalize out newlines within fields in dos files
	awk -v ORS=$'\x1d' -v RS="\r\n" '{gsub("\n", " ", $0); print $0}' "${oldfile}" |tr $'\x1d' "\n" > ${fixedfile} 
	rm ${oldfile}
}

function fix_encoding(){
	local oldfile="${1}old"
	local fixedfile="${1}"
	cp ${fixedfile} "${1}old"
	iconv -f utf-8 -t utf-8 -c ${oldfile} -o ${fixedfile}
	rm ${oldfile}
}

function fix_nullsquotes(){
	local infile=${1}
	local outfile="${1}_out"
	local badfile="${1}_bad"
	awk -v numfields=$numfields -v outfile="${outfile}" -v badfile="${badfile}" -f tmp_filefixawk ${infile}
}

function to_tsv(){
	local file="${1}"

	case $filetype in
		pipe)
			sed -i 's/|/\t/g' ${file} ;;
		carrot)
			sed -i 's/\^/\t/g' ${file} ;;
		comma)
			csvformat -T ${file} > "${file}1"
			mv "${file}1" ${file} ;;
		semicolon)
			sed -i 's/;/\t/g' ${file} ;;
	esac
}

function words2numbers() {
	local wordfile="${1}"
	local words="${2}"


	if [[ $words -eq 2 ]];then
		sed -i 's/\b\([0-9]*[0-9]\)[\/-]jan[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-01-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]feb[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-02-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]mar[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-03-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]apr[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-04-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]may[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-05-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]jun[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-06-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]jul[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-07-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]aug[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-08-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]sep[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-09-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]oct[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-10-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]nov[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-11-\2/ig
			s/\b\([0-9]*[0-9]\)[\/-]dec[^\t\/-]*[\/-]\([0-9][0-9]*\)\b/\1\-12-\2/ig
		' "${wordfile}"
	fi

	if [[ $words -eq 1 ]];then
		sed -i 's/\bjan[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/01-\1-\2/ig
			s/\bfeb[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/02-\1-\2/ig
			s/\bmar[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/03-\1-\2/ig
			s/\bapr[\t^\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9][0-9]*\)\b/04-\1-\2/ig
			s/\bmay[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/05-\1-\2/ig
			s/\bjun[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/06-\1-\2/ig
			s/\bjul[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/07-\1-\2/ig
			s/\baug[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/08-\1-\2/ig
			s/\bsep[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/09-\1-\2/ig
			s/\boct[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/10-\1-\2/ig
			s/\bnov[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/11-\1-\2/ig
			s/\bdec[^\t\/-]*[\/-]\([0-9]*[0-9]\)[\/-]\([0-9][0-9]*\)\b/12-\1-\2/ig
		' "${wordfile}"
	fi

}

function fix_file() {
local infile="${1}"
local outfile=""
filedetect="${infile,,}"
filecontent=""

[[ "${filedetect}" =~ loan ]] && filecontent="loan"

outfile=$(sed 's/\.....\?$//' <<< "${infile}")

if [[ "${infile: -4}" == "xlsx" ]];then
	if [[ -f /home/ssm-user/.local/bin/xlsx2csv ]];then
		/home/ssm-user/.local/bin/xlsx2csv -d "\t" --skipemptycolumns "${infile}" > "${outfile}.tsv"
	else
		xlsx2csv -d "\t" --skipemptycolumns "${infile}" > "${outfile}.tsv"
	fi

	if [[ $(head -1 "${outfile}.tsv") =~ ^$'\t' ]];then
		cut -f2- "${outfile}.tsv" > tmp
		mv tmp "${outfile}.tsv"
	fi

	infile="${outfile}.tsv"
	foundExcel=1
	echo "Excel file detected -- converting"
fi

echo
echo "################ Processing ${infile} #####################"

if [[ ! -f "${infile}" ]];then echo "The input file ${infile} could not be found";exit;fi

dosfile=0

head -1 ${infile} | grep -q $'\r' && dosfile=1

numrecs=$(wc -l ${infile} |cut -d " " -f1)
num_per_file=$(($numrecs / 5 + 1))

split -l $num_per_file ${infile} filefix
splitlist=(filefixaa filefixab filefixac filefixad filefixae)

words=0

head -50 "${infile}" |grep -Pqoi "\b(apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sep)[^\t\/-]*[\/-][0-9][0-9]*[\/-][0-9][0-9]*\b" && words=1
head -50 "${infile}" |grep -Pqoi "\b[0-9\[0-9]*[\/-](apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sep)[^\t\/-]*[\/-][0-9][0-9]*\b" && words=2

if [[ $words -gt 0 ]];then
	echo
	echo "Dates containing words detected"
	echo

	for splitfile in ${splitlist[@]};do 
		words2numbers ${splitfile} ${words} & 
	done
	wait

fi

if [[ -z $dateformat ]]; then
	head -50 "${infile}" |grep -o "\b[0|1]\?[0-9][/\-][0-3]\?[0-9][/\-][27-9][0-9]\b" > /dev/null && echo "Six digit date with trailing year detected." && dateformat="us-single"
	head -50 "${infile}" |grep -o "\b[78-9][0-9][/\-][0-3]\?[0-9][/\-][0|1]\?[0-9]\b" > /dev/null && echo "Six digit date with leading year detected."

	head -50 "${infile}" |grep -o "\b[0-2][0-9][/\-][0-9][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null &&  dateformat="us"
	head -50 "${infile}" |grep -o "\b[0-9][/\-][23][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null &&  dateformat="us-single"
	head -50 "${infile}" |grep -o "\b[23][0-9][/\-][0-9][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null && dateformat="uk"
	head -50 "${infile}" |grep -o "\b[23][0-9][/\-][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null && dateformat="uk-single"
	head -50 "${infile}" |grep -o "\b[12][01239][0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]\b" > /dev/null && dateformat="slashes"
fi



if [[ ${dateformat} == "uk" ]];then echo "UK dates detected. DD-MM-YYYY dates will be converted to YYYY-MM-DD";fi
if [[ ${dateformat} == "uk-single" ]];then echo "UK dates with single digits detected. D-M-YYYY dates will be converted to YYYY-MM-DD";fi
if [[ ${dateformat} == "us" ]];then echo "US dates detected. MM-DD-YYYY dates will be converted to YYYY-MM-DD";fi
if [[ ${dateformat} == "us-single" ]];then echo "US dates with single digits detected. M-D-YYYY dates will be converted to YYYY-MM-DD";fi



for splitfile in ${splitlist[@]};do 
	fix_encoding ${splitfile} & 
done
wait
firstline="$(head -1 filefixaa)"

echo "${firstline}" | grep -q "|" && filetype="pipe"
echo "${firstline}" | fgrep -q "^" && filetype="carrot"
echo "${firstline}" | grep -q "," && filetype="comma"
echo "${firstline}" | grep -qP "\t" && filetype="tab"
echo "${firstline}" | grep -qP ";" && filetype="semicolon"

if [[ ! $filetype ]];then
	echo "${infile} doesn't appear to be comma or tab delimited."
	echo "Please supply a different file or correct the first line."
	echo
	exit
fi

echo "Normalizing format"

for splitfile in ${splitlist[@]};do 
	to_tsv ${splitfile} &
done
wait

if [[ $dosfile -eq 1 ]];then
	for splitfile in ${splitlist[@]};do 
		fix_dos ${splitfile} &
	done
	wait
fi

# detect file characteristics. First line is assumed to contain either tabs or commas

numrecs=$(wc -l "${infile}" |cut -d " " -f1)
numfields=$(awk 'BEGIN{FS="\t"}{print NF;exit}' filefixaa)
num_labeled_fields=$(head -1 filefixaa |tr '\t' '\n' |grep -i [a-z0-9] |wc -l)

echo "The following $numfields fields in $numrecs lines were detected:"
echo

if [[ $numfields != $num_labeled_fields ]];then
	echo
	echo "$numfields fields detected but $num_labeled_fields fields with labels were detected."
	echo
	echo "WARNING: DISPARITY BETWEEN NUMBER OF FIELDS AND NUMBER OF LABELS USUALLY INDICATES DATA PROBLEMS -- INSPECT FILE."
	echo
fi

head -50 filefixaa |grep -o "\b[1-9]\.[0-9]\+E+[0-9]\+\b" > /dev/null && echo "WARNING: POSSIBLE EXCEL CORRUPTION -- INSPECT FILE"

# normalize fieldnames in file
if [[ ${filecontent} == "loan" ]];then
sed -i '
1 s/[^0-9A-Za-z_#)(\.\t\-]//g
1 s/\bp[^\t]*barcode\b/patron_barcode/i
1 s/\bbarcode[^\t]*p[^\t]*\b/patron_barcode/i
1 s/\bi[^\t]*barcode\b/item_barcode/i
1 s/\bbarcode[^\t]*i[^\t]*\b/item_barcode/i
1 s/\bout[^\t]*date\b/out_date/i
1 s/\bdatecheckedout\b/out_date/i
1 s/\bdue[^\t]*date\b/due_date/i
1 s/\bdate[^\t]*due\b/due_date/i
1 s/\btot[^\t]*renew[^\t]*\b/renewal_count/i
1 s/\b[^\tp]*tatus\b/next_item_status/i
1 s/\b[^p\t][^\t]*arcode/item_barcode/i
s/ [0-9]*:[0-9]*\($\|[\t]\)/\1/g
' filefixaa 

echo "Loan file detected. Attempting to standardize headers"

else
	sed -i '1 s/[^0-9A-Za-z_#\)\(\.\t\-]//g' filefixaa
fi

read -r fieldnames < filefixaa

fieldnames=$(tr -dc "[[A-Za-z0-9]]_	\-#." <<< "${fieldnames}")
echo "The following fields were detected in ${infile}"
echo "${fieldnames}" |tr "\t" "\n" |grep -n . |column 

SINGLE=$(echo -ne '\u00B4\u2018\u2019')
DOUBLE=$(echo -ne '\u201C\u201D')
NBSP=$(echo -ne '\uc2a0\u00a0\ufeff')
CONTROL=$(echo -ne '\u001b\u0007\u0001')

echo "Scanning for and correcting invalid entries. Please be patient"

for file in ${splitlist[@]};do 
	fix_characters ${file} & 
done
wait

fix_dates(){
	local file=${1}
	local dateformat=${2}


	case $dateformat in
		us)
			sed -i 's/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([89][0-9]\)\b/\119\2/g;s/\b\([0-9][0-9]\)[/\-]\([0-9][0-9]\)[/\-]\([0-9][0-9][0-9][0-9]\)\b/\3-\1-\2/g;s/ \+-  -\( \+\)\?//g' ${file}	
			;;
		us-single)
			sed -i -r -e 'sx([^0-9]|\b)([0-9][/\-])x\10\2xg;sx/([0-9][/\-])x/0\1xg' ${file}
			sed -i  's/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([7-9][0-9]\)\b/\119\2/g;s/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([0-2][0-9]\)\b/\120\2/g;s/\b\([0-9][0-9]\)[/\-]\([0-9][0-9]\)[/\-]\([0-9][0-9][0-9][0-9]\)\b/\3-\1-\2/g;s/ \+-  -\( \+\)\?//g;' ${file}
			;;

		uk)
			sed -i 's/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([7-9][0-9]\)\b/\119\2/g;s/\b\([0-9][0-9]\)[/\-]\([0-9][0-9]\)[/\-]\([0-9][0-9][0-9][0-9]\)\b/\3-\2-\1/g;s/ \+-  -\( \+\)\?//g;' ${file}
			;;
		uk-single)
			sed -i -r -e 'sx([^0-9]|\b)([0-9][/\-])x\10\2xg;sx/([0-9][/\-])x/0\1xg' ${file}
			sed -i 's/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([7-9][0-9]\)\b/\119\2/g;s/\b\([0-9][0-9][/\-][0-9][0-9][/\-]\)\([0-2][0-9]\)\b/\120\2/g;s/\b\([0-9][0-9]\)[/\-]\([0-9][0-9]\)[/\-]\([0-9][0-9][0-9][0-9]\)\b/\3-\2-\1/g;s/ \+-  -\( \+\)\?//g;' ${file} 
			;;
		slashes)
			sed -i 's#\b\([12][1230][0-9][0-9]\)/\([0-9][0-9]\)/\([0-9][0-9]\)\b#\1-\2-\3#g' ${file}
			;;
	esac
}


case $dateformat in
	us)
		echo "No UK formatted dates detected in first 50 lines"
		echo "Converting MM-DD-YYYY dates to YYYY-MM-DD and stripping blank dates"
		;;
	us-single)
		echo "Converting US dates with single digits to to YYYY-MM-DD and stripping blank dates"
		;;

	uk)
		echo "Converting DD-MM-YYYY dates to YYYY-MM-DD and stripping blank dates"
		;;
	uk-single)
		echo "Converting UK dates with single digits to YYYY-MM-DD and stripping blank dates"
		;;
	slashes)
		echo "Reformatting dates to YYYY-MM-DD"
		;;
esac

for file in ${splitlist[@]};do 

	fix_dates ${file} ${dateformat} ${words} &
done
wait


read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f

BEGIN {
	FS=OFS="\t"
	goodrecs=badrecs=0
}

{
	if (NF == numfields) { 
		print $0 > outfile	
	} else {
		if ((NF == numfields + 1) && (substr($0, length($0), 1) == "\t")) {
			$0 = substr($0, 1, length($0) - 1)
			print $0 > outfile	
		} else {
			badrecs++
			print $0 > badfile
		}
	}
	if (NR % 10000 == 0 ) {printf (".")}
}
ENDOFAWK

echo -e "${awkscript}" > tmp_filefixawk
chmod 700 tmp_filefixawk

if [[ "${infile}" =~ \....$ ]];then
	outfile=$(echo "${infile}" |sed 's/\(.*\)\(\....$\)/\1_fixed\2/')
else
	outfile="${infile}_fixed"
fi
badfile="${infile}_error"
echo
echo "Examining individual cells. Please be patient. Each dot is 10,000 records"

for splitfile in ${splitlist[@]};do 
	fix_nullsquotes ${splitfile} &
done
wait

rm -f "${outfile}" "${badfile}"
cat filefixaa_out filefixab_out filefixac_out filefixad_out filefixae_out >> "${outfile}"
cat filefixaa_bad filefixab_bad filefixac_bad filefixad_bad filefixae_bad > "${badfile}" 2>/dev/null

numclean=$(wc -l ${outfile} |cut -d " " -f1)

echo
echo "$numclean records have been output to ${outfile}"

if [[ -f $badfile ]];then
	numbad=$(wc -l "${infile}_error" |cut -d " " -f1)
	echo "$numbad bad records were output to "${infile}_error
fi
echo

for splitfile in ${splitlist[@]};do 
	rmfile="${splitfile}_out"
	rm -f $splitfile $rmfile
done
rm tmp_filefixawk

if [[ foundExcel -eq 1 ]];then
	rm -f "${infile}"
fi
foundExcel=0
}

for file in "${filelist[@]}";do
	fix_file "${file}"
done

filelist=("$@")
infile="${filelist[0]}"

if [[ "${infile}" =~ \....$ ]];then
	finalfile=$(echo "${infile}" |sed 's/\(.*\)\(\....$\)/\1_fixed.tsv/')
else
	finalfile="${infile}_fixed.tsv"
fi

errorfile="${infile}_error"
rm -f "${finalfile}" "${errorfile}"
rm -f filefix*_bad filefixa* 

if [[ ${filelist[-1]} == "us-single" ]]; then
	unset 'filelist[${#filelist[@]}-1]'
	dateformat="us-single"
fi
if [[ ${filelist[-1]} == "uk-single" ]]; then
	unset 'filelist[${#filelist[@]}-1]'
	dateformat="uk-single"
fi

if [[ -z ${infile} ]];then echo "You must supply a file name or expression (wildcards OK). Usage: filefix [filename]";fi

if [[ -z $1 ]];then
	echo "This tool converts csv data to tsv, performs basic cleaning, and does field frequency counts "
	echo "It detects date formats and converts MM-DD-YYYY and DD-MM-YYYY dates to YYYY-MM-DD. "
	echo 
	echo "Usage: filefix [filename]"
	echo
	exit
else
	infile=${1}
fi

fix_characters(){
	local file=${1}
	sed -i "
	s/['\"];['\"]/;/g
	s/[$SINGLE]/'/g
	s/[$DOUBLE]/\"/g
	s/[$NBSP]/ /g
	s/[$CONTROL]/ /g
	s/\";\"/;/g
	s/^\"\|\"$//g
	s/^\"//
	s/\"$//
	s/\b[(]*null[)]*\b//ig
	s/\r/ /g
	s/\"\?\t\"\?/\t/g
	" ${file}
}

fix_dos(){
	local oldfile="${1}old"
	local fixedfile="${1}"
	cp ${fixedfile} ${oldfile}
	awk 'BEGIN{FS="\t";RS=ORS="\n"}{if ($numfields !~ /\r$/){print $0"\r"}else print $0}' ${oldfile} > "${fixedfile}"
	cp ${fixedfile} ${oldfile}

	# normalize out newlines within fields in dos files
	awk -v ORS=$'\x1d' -v RS="\r\n" '{gsub("\n", " ", $0); print $0}' "${oldfile}" |tr $'\x1d' "\n" > ${fixedfile} 
	rm ${oldfile}
}

function fix_encoding(){
	local oldfile="${1}old"
	local fixedfile="${1}"
	cp ${fixedfile} "${1}old"
	iconv -f utf-8 -t utf-8 -c ${oldfile} -o ${fixedfile}
	rm ${oldfile}
}

function fix_nullsquotesdates(){
	local infile=${1}
	local outfile="${1}_out"
	local badfile="${1}_bad"
	awk -v numfields=$numfields -v outfile="${outfile}" -v badfile="${badfile}" -v DATEFORMAT="${dateformat}" -v DATEFIELDS="${datefields}" -f tmp_filefixawk ${infile}
}

function to_tsv(){
	local file="${1}"

	case $filetype in
		pipe)
			sed -i 's/|/\t/g' ${file} ;;
		carrot)
			sed -i 's/\^/\t/g' ${file} ;;
		comma)
			csvformat -T ${file} > "${file}1"
			mv "${file}1" ${file} ;;
		semicolon)
			sed -i 's/;/\t/g' ${file} ;;
	esac
}

function fix_file() {
local infile="${1}"
local outfile=""
filedetect="${infile,,}"
filecontent=""

[[ "${filedetect}" =~ loan ]] && filecontent="loan"

outfile=$(sed 's/\.....\?$//' <<< "${infile}")

if [[ "${infile: -4}" == "xlsx" ]];then
	if [[ -f /home/ssm-user/.local/bin/xlsx2csv ]];then
		/home/ssm-user/.local/bin/xlsx2csv -d "\t" --skipemptycolumns "${infile}" > "${outfile}.tsv"
	else
		xlsx2csv -d "\t" --skipemptycolumns "${infile}" > "${outfile}.tsv"
	fi

	if [[ $(head -1 "${outfile}.tsv") =~ ^$'\t' ]];then
		cut -f2- "${outfile}.tsv" > tmp
		mv tmp "${outfile}.tsv"
	fi

	infile="${outfile}.tsv"
	foundExcel=1
	echo "Excel file detected -- converting"
fi

echo
echo "################ Processing ${infile} #####################"

if [[ ! -f "${infile}" ]];then echo "The input file ${infile} could not be found";exit;fi

dosfile=0

head -1 ${infile} | grep -q $'\r' && dosfile=1

numrecs=$(wc -l ${infile} |cut -d " " -f1)
num_per_file=$(($numrecs / 5 + 1))

split -l $num_per_file ${infile} filefix
splitlist=(filefixaa filefixab filefixac filefixad filefixae)

echo "Fixing encoding"
for splitfile in ${splitlist[@]};do 
	fix_encoding ${splitfile} &
done
wait

firstline="$(head -1 filefixaa)"

echo "${firstline}" | grep -q "|" && filetype="pipe"
echo "${firstline}" | fgrep -q "^" && filetype="carrot"
echo "${firstline}" | grep -q "," && filetype="comma"
echo "${firstline}" | grep -qP "\t" && filetype="tab"
echo "${firstline}" | grep -qP ";" && filetype="semicolon"

if [[ ! $filetype ]];then
	echo "${infile} doesn't appear to be comma or tab delimited."
	echo "Please supply a different file or correct the first line."
	echo
	exit
fi

echo "Normalizing format"

for splitfile in ${splitlist[@]};do 
	to_tsv ${splitfile} &
done
wait

if [[ $dosfile -eq 1 ]];then
	for splitfile in ${splitlist[@]};do 
		fix_dos ${splitfile} &
	done
	wait
fi

# detect file characteristics. First line is assumed to contain either tabs or commas

numrecs=$(wc -l "${infile}" |cut -d " " -f1)
numfields=$(awk 'BEGIN{FS="\t"}{print NF;exit}' filefixaa)
num_labeled_fields=$(head -1 filefixaa |tr '\t' '\n' |grep -i [a-z0-9] |wc -l)

echo "The following $numfields fields in $numrecs lines were detected:"
echo

if [[ $numfields != $num_labeled_fields ]];then
	echo
	echo "$numfields fields detected but $num_labeled_fields fields with labels were detected."
	echo
	echo "WARNING: DISPARITY BETWEEN NUMBER OF FIELDS AND NUMBER OF LABELS USUALLY INDICATES DATA PROBLEMS -- INSPECT FILE."
	echo
fi

head -50 filefixaa |grep -o "\b[1-9]\.[0-9]\+E+[0-9]\+\b" > /dev/null && echo "WARNING: POSSIBLE EXCEL CORRUPTION -- INSPECT FILE"

# normalize fieldnames in file
if [[ ${filecontent} == "loan" ]];then
sed -i '
1 s/[^0-9A-Za-z_#)(\.\t\-]//g
1 s/\bp[^\t]*barcode\b/patron_barcode/i
1 s/\bbarcode[^\t]*p[^\t]*\b/patron_barcode/i
1 s/\bi[^\t]*barcode\b/item_barcode/i
1 s/\bbarcode[^\t]*i[^\t]*\b/item_barcode/i
1 s/\bout[^\t]*date\b/out_date/i
1 s/\bcharge[^\t]*date\b/out_date/i
1 s/\bdatecheckedout\b/out_date/i
1 s/\bdue[^\t]*date\b/due_date/i
1 s/\bcurrent[^\t]*due[^\t]*date\b/due_date/i
1 s/\bdate[^\t]*due\b/due_date/i
1 s/\btot[^\t]*renew[^\t]*\b/renewal_count/i
1 s/\brenew[^\t]*\b/renewal_count/i
1 s/\b[^\tp]*tatus\b/next_item_status/i
1 s/\b[^p\t][^\t]*arcode/item_barcode/i
s/ [0-9]*:[0-9]*\($\|[\t]\)/\1/g
' filefixaa 

echo "Loan file detected. Attempting to standardize headers"

else
	sed -i '1 s/[^0-9A-Za-z_#\)\(\.\t\-]//g' filefixaa
fi

read -r fieldnames < filefixaa

fieldnames=$(tr -dc "[[A-Za-z0-9]]_	\-#." <<< "${fieldnames}")
echo "The following fields were detected in ${infile}"
echo "${fieldnames}" |tr "\t" "\n" |grep -n . |column 
echo
echo "The following date containing fields were detected in ${infile}"
echo "${fieldnames}" |tr "\t" "\n" |grep -ni date |sed '/[Yy][Ee][Aa][Rr]\|[Mm][Oo][Nn][Tt][Hh]\|[Dd][Aa][Yy]\|[Nn][Oo][Tt][Ee]/d'
echo

datefields=$(echo "${fieldnames}" |tr "\t" "\n" |grep -ni date |tr [A-Z] [a-z] | sed '/year\|month\|day\|note/d; s/:.*//' |tr '\n' ' ')
cutfields=$(echo "${datefields// /,}" | sed 's/^/-f/;s/,$//' |grep [0-9])

if [[ ${#cutfields} -gt 0 ]];then
	head -50 filefixaa > tmp_datecheck1
	cut ${cutfields} tmp_datecheck1 > tmp_datecheck 
	 
	words=0
	
	cat tmp_datecheck |grep -Pqoi "\b(apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sep)[^\t\/-]*[\/-][0-9][0-9]*[\/-][0-9][0-9]*\b" && words=1
	cat tmp_datecheck |grep -Pqoi "\b[0-9\[0-9]*[\/-](apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sep)[^\t\/-]*[\/-][0-9][0-9]*\b" && words=2
	
	if [[ $words -gt 0 ]];then
		echo
		echo "Dates containing words detected"
		echo
	fi
	
	if [[ -z $dateformat ]]; then
		cat tmp_datecheck |grep -o "\b[0|1]\?[0-9][/\-][0-3]\?[0-9][/\-][27-9][0-9]\b" > /dev/null && echo "Six digit date with trailing year detected." && dateformat="us-single"
		cat tmp_datecheck |grep -o "\b[0-3]\?[0-9][/\-][0|1]\?[0-9][/\-][27-9][0-9]\b" > /dev/null && echo "Six digit UK date with trailing year detected." && dateformat="6digit-trailing-uk"
		cat tmp_datecheck |grep -o "\b[78-9][0-9][/\-][0|1]\?[0-9][/\-][0-3]\?[0-9]\b" > /dev/null && echo "Six digit date with leading year detected." && dateformat="6digit-leading"
	
		cat tmp_datecheck |grep -o "\b[0-2][0-9][/\-][0-9][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null &&  dateformat="us"
		cat tmp_datecheck |grep -o "\b[0-9][/\-][23][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null &&  dateformat="us-single"
		cat tmp_datecheck |grep -o "\b[23][0-9][/\-][0-9][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null && dateformat="uk"
		cat tmp_datecheck |grep -o "\b[23][0-9][/\-][0-9][/\-][12][09][0-9][0-9]\b" > /dev/null && dateformat="uk-single"
		cat tmp_datecheck |grep -o "\b[12][01239][0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]\b" > /dev/null && dateformat="slashes"
		cat tmp_datecheck |grep -o "\b[12][01239][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*\b" > /dev/null && dateformat="numbers"
	fi
	
	if [[ ${dateformat} == "uk" ]];then echo "UK dates detected. DD-MM-YYYY dates will be converted to YYYY-MM-DD";fi
	if [[ ${dateformat} == "uk-single" ]];then echo "UK dates with single digits detected. D-M-YYYY dates will be converted to YYYY-MM-DD";fi
	if [[ ${dateformat} == "us" ]];then echo "US dates detected. MM-DD-YYYY dates will be converted to YYYY-MM-DD";fi
	if [[ ${dateformat} == "us-single" ]];then echo "US dates with single digits detected. M-D-YYYY dates will be converted to YYYY-MM-DD";fi
	if [[ ${dateformat} == "numbers" ]];then echo "Numeric string detected -- will be converted to YYYY-MM-DD";fi

	rm tmp_datecheck
	rm tmp_datecheck1
fi

SINGLE=$(echo -ne '\u00B4\u2018\u2019')
DOUBLE=$(echo -ne '\u201C\u201D')
NBSP=$(echo -ne '\uc2a0\u00a0\ufeff')
CONTROL=$(echo -ne '\u001b\u0007\u0001')

echo -en "Analyzing ${infile}. Please be patient"

while [ true ];do
	echo -en "."
	sleep 1
done & 
background_pid=$!

for file in ${splitlist[@]};do 
	fix_characters ${file} & 
	pids[${file}]=$!
done

for pid in ${pids[*]}; do
    wait $pid
done

disown $background_pid
kill $background_pid 
echo

case $dateformat in
	us)
		echo "No UK formatted dates detected in first 50 lines"
		echo "Converting MM-DD-YYYY dates to YYYY-MM-DD and stripping blank dates"
		;;
	us-single)
		echo "Converting US dates with single digits to to YYYY-MM-DD and stripping blank dates"
		;;

	uk)
		echo "Converting DD-MM-YYYY dates to YYYY-MM-DD and stripping blank dates"
		;;
	uk-single)
		echo "Converting UK dates with single digits to YYYY-MM-DD and stripping blank dates"
		;;
	slashes)
		echo "Reformatting dates to YYYY-MM-DD"
		;;
	numbers)
		echo "Reformatting numeric dates to YYYY-MM-DD"
		;;
esac

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f

BEGIN {
	FS=OFS="\t"
	goodrecs=badrecs=0
	current0=last0=""
	split(DATEFIELDS, datefields, " ")
}

function fix_dates() {
	for (datefield in datefields) {
		fixdate = datefields[datefield]

		# slashes to hyphens
		gsub(/\//, "-", $fixdate)
		# remove timestamps
		if (DATEFORMAT == "numbers") { $fixdate = substr($fixdate,1,4)"-"substr($fixdate,5,2)"-"substr($fixdate,7,2) }
		sub(/ [0-9\.:]*$/, "", $fixdate)

		arraylen = split($fixdate, splitdate,"-")

		if (arraylen == 3) {
			if (WORDS > 0) {
				match1 = tolower(splitdate[1])
				match2 = tolower(splitdate[2])

				if (match1 ~ /[a-z]/) {
					DATEFORMAT = "us-single"
					gensub(/^jan.*/, "01", splitdate[1])
					gensub(/^feb.*/, "02", splitdate[1])
					gensub(/^mar.*/, "03", splitdate[1])
					gensub(/^apr.*/, "04", splitdate[1])
					gensub(/^may.*/, "05", splitdate[1])
					gensub(/^jun.*/, "06", splitdate[1])
					gensub(/^jul.*/, "07", splitdate[1])
					gensub(/^aug.*/, "08", splitdate[1])
					gensub(/^sep.*/, "09", splitdate[1])
					gensub(/^oct.*/, "10", splitdate[1])
					gensub(/^nov.*/, "11", splitdate[1])
					gensub(/^dec.*/, "12", splitdate[1])
				}
				if (match2 ~ /[a-z]/) {
					DATEFORMAT = "uk-single"
					gensub(/^jan.*/, "01", splitdate[2])
					gensub(/^feb.*/, "02", splitdate[2])
					gensub(/^mar.*/, "03", splitdate[2])
					gensub(/^apr.*/, "04", splitdate[2])
					gensub(/^may.*/, "05", splitdate[2])
					gensub(/^jun.*/, "06", splitdate[2])
					gensub(/^jul.*/, "07", splitdate[2])
					gensub(/^aug.*/, "08", splitdate[2])
					gensub(/^sep.*/, "09", splitdate[2])
					gensub(/^oct.*/, "10", splitdate[2])
					gensub(/^nov.*/, "11", splitdate[2])
					gensub(/^dec.*/, "12", splitdate[2])
				}
				
			}

			if (DATEFORMAT == "uk") { $fixdate = splitdate[3]"-"splitdate[2]"-"splitdate[1] }
			if (DATEFORMAT == "uk-single") { 
				if (length(splitdate[3]) == 2) {
					if (splitdate[3] < 30) { splitdate[3] = "20"splitdate[3] } else { splitdate[3] = "19"splitdate[3] }
					}
				$fixdate = sprintf("%04d-%02d-%02d", splitdate[3], splitdate[2], splitdate[1]) 
			}

			if (DATEFORMAT == "us") { $fixdate = splitdate[3]"-"splitdate[1]"-"splitdate[2] }
			if (DATEFORMAT == "us-single") { 
				if (length(splitdate[3]) == 2) {
					if (splitdate[3] < 30) { splitdate[3] = "20"splitdate[3] } else { splitdate[3] = "19"splitdate[3] }
				}
				$fixdate = sprintf("%04d-%02d-%02d", splitdate[3], splitdate[1], splitdate[2]) 
			}

			if (DATEFORMAT == "6digit-leading") { 
				if (splitdate[1] < 30) { splitdate[1] = "20"splitdate[1] } else { splitdate[1] = "19"splitdate[1] }
				$fixdate = sprintf("%04d-%02d-%02d", splitdate[1], splitdate[2], splitdate[3]) 
			}
			if (DATEFORMAT == "6digit-trailing-uk") { 
				if (splitdate[3] < 30) { splitdate[3] = "20"splitdate[3] } else { splitdate[3] = "19"splitdate[3] }
				$fixdate = sprintf("%04d-%02d-%02d", splitdate[3], splitdate[2], splitdate[1]) 
			}

			# find zero value dates
			if ($fixdate ~ /-00/) { $fixdate = "" }
			
		} else {
			if (FNR != 1) { $fixdate = "" }
		}
	}
}

{
	if (NF == numfields) { 
		fix_dates()
		print $0 > outfile	
	} else {
		if ((NF == numfields + 1) && (substr($0, length($0), 1) == "\t")) {
			$0 = substr($0, 1, length($0) - 1)
			fix_dates()
			print $0 > outfile	
		} else {
			badrecs++
			print $0 > badfile
		}
	}
	if (NR % 2000 == 0 && FILENAME == "filefixad") {printf "Records processed: %s\r", NR*5}
}
ENDOFAWK

echo -e "${awkscript}" > tmp_filefixawk
chmod 700 tmp_filefixawk

echo "Performing corrections"

for splitfile in ${splitlist[@]};do 
	fix_nullsquotesdates ${splitfile} &
done
wait

cat filefixa*_out >> "${finalfile}"
cat filefixa*_bad > "${errorfile}" 2>/dev/null

rm -f filefixa*
rm tmp_filefixawk

numclean=$(wc -l ${finalfile} |cut -d " " -f1)

echo "$numclean records have been output to ${finalfile}"

if [[ -f ${errorfile} ]];then
	numbad=$(wc -l "${errorfile}" |cut -d " " -f1)
	echo "$numbad bad records were output to ${errorfile}"
fi
echo

if [[ foundExcel -eq 1 ]];then
	rm -f "${infile}"
fi
foundExcel=0
}

for file in "${filelist[@]}";do
	fix_file "${file}"
done

#0cf-e4aa278110b7 expects fine amounts in column 1, patron uuid in column 2

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

fines_file="fines.tsv"
legacySystem="Sierra"
logfile="feefine.log"
num_retrieved=1000
rm -f ${logfile}

sed -i 's/"//g' "${fines_file}"

# FeeFine owner must be defined in /settings/users/owners
fine_owner="096f375a-1173-4440-b9e5-56df2c07aca7"

id=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/owners/${fine_owner}" |jq -r .id)
if [[ $id != "${fine_owner}" ]];then echo "Fine owner not located. Exiting program";exit;fi

# FeeFine type should be defined in /settings/users/feefinestable
feeFineType="Migrated fine"

function fetch_batch() {
	local offset=$1
	curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/users?query=cql.allRecords=1&limit=${num_retrieved}&offset=$offset" |jq -c ".users[]"  > "tmp_users.${t}"
}

declare -A user_dict 

create_fine() {

patron_barcode=${patron_barcode//[^0-9A-Za-z\-]/}
fineamount=${fineamount//[^0-9\.]/}
item_charge=${item_charge//[^0-9\.]/}
processing_fee=${processing_fee//[^0-9\.]/}
billing_fee=${billing_fee//[^0-9\.]/}

feeFineId=$(uuid)
fineId=$(uuid)
actionId=$(uuid)

IFS='' read -r -d '' fine << EndOfJSON
{
  "ownerId": "${fine_owner}",
  "feeFineId": "${feeFineId}",
  "paymentStatus":{"name":"Outstanding"},
  "status":{"name":"Open"},
  "amount": "${fineamount}",
  "remaining": "${fineamount}",
  "feeFineType": "${feeFineType}",
  "id": "${fineId}",
  "userId": "${userid}"
}
EndOfJSON

IFS='' read -r -d '' action << EndOfJSON
{
  "typeAction":"Migration",
  "accountId": "${fineId}",
  "amountAction": "${fineamount}",
  "balance":"${fineamount}",
  "transactionInformation":"",
  "comments": "Fine migrated from ${legacySystem}. ${notes} ",
  "notify":false,
  "id": "${actionId}",
  "userId": "${userid}"
}
EndOfJSON
}

echo "Retrieving user records"
all_users=""
num_records=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/users?limit=0" |jq -r .totalRecords)

for (( offset=0; offset<=$num_records; ));do
	for ((t=0; t<=4; t=$(($t + 1)) )); do
		if [[ $offset -le $num_records ]];then 
			fetch_batch $offset &
			offset=$(($offset + $num_retrieved))
		fi
	done
	wait
		
	cat tmp_users.* >> tmp_users
	rm tmp_users.*

	if [[ $offset -ne 0 ]];then printf "%s records retrieved of %s\r" $offset $num_records;fi
done

# load user uuids into scalar array keyed by barcode 
echo "Loading ids. Please be patient           "

cat tmp_users | jq -r .barcode > tmp_barcodes
cat tmp_users | jq -r .id > tmp_ids

counter=0

while IFS=$'\n' read -r barcode && IFS=$'\n' read -r id <&3; do
        counter=$(($counter+ 1))
        if [[ $((counter % 1000)) == 0 ]];then echo -en "Records loaded: $counter                 \r";fi
        user_dict["${barcode}"]="${id}"
done < tmp_barcodes 3< tmp_ids

echo "$counter records loaded                          "

#eval "$(cat tmp_users |jq -r 'select(.barcode != null) | @sh "user_dict[\(.barcode|tostring)]=\(.id|tostring)"')"

counter=1
badbarcodes=0

numloans=$(cat ${fines_file} |wc -l)
item_barcode=""

while IFS=$'\n' read -r line; do
	line=$(tr "\t" "^" <<< "${line}")
	# required fields: patron_barcode fine_amount
	#
	#IFS=$'^' read -r patron_barcode item_charge item_barcode fee_assess_date fineamount <<< "${line}"
	#
	#IFS=$'^' read -r patron_identifier fineamount patron_barcode item_identifier item_barcode outdate duedate notes  <<< "${line}"
	IFS=$'^' read -r patron_name patron_barcode fineamount notes  <<< "${line}"
	
	if [[ -z $patron_barcode ]];then patron_barcode="${patron_identifier}";fi
	if [[ item_barcode != "" ]];then notes=" Item: ${item_barcode}. ${notes}";fi

	echo -en "Processing record $counter of ${numloans}. Bad barcodes found: ${badbarcodes}\r"


if [[ ! -z ${user_dict[${patron_barcode}]} ]];then
	userid=${user_dict[${patron_barcode}]}
	create_fine
	account_data=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${fine}" "${okapi_url}/accounts")
	echo -e "${account_data//$'\n'/ }" >> ${logfile}

	feefine_data=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${action}" "${okapi_url}/feefineactions")
	
	echo -e "${feefine_data//$'\n'/ }" >> ${logfile}
else
	badbarcodes=$(($badbarcodes + 1))
	echo -e "Barcode not found\t${patron_barcode}" >> ${logfile}
fi

counter=$(($counter + 1))

done < ${fines_file}
echo 
echo "Processing completed"

echo "$badbarcodes barcodes were not found. Server responses are output to ${logfile}"

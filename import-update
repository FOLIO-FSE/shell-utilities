auth 2>/dev/null || authn 2>/dev/null

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile="ids"
profileName="ZKB Items, update on UUID"

if [[ "${profileName,,}" =~ "uuid" ]]; then infile="uuids";fi
if [[ "${profileName,,}" =~ "barcode" ]]; then infile="barcodes";fi

if [[ ! -f "${infile}" ]];then echo "You must supply a file named \"${infile}\""; exit;fi

echo "Matching on file named \"${infile}\""

batch=0
counter=0
numrecs=$(wc -l ${infile} |cut -f1 -d " ")
echo "${numrecs} records detected"

total_arr=() # needed to remember variable from loop

dos2unix "${infile}"
idfile=$(head -1 "${infile}" |wc -c)

if [[ ${#idfile} -lt 38 ]];then 
	idfile="yes"
	echo "File of ${infile} detected. Building MARC_JSON objects"
fi

user_id=$(cat okapi.token |base64 -di 2>/dev/null |jq -r 'select(.user_id != null) |.user_id' 2>/dev/null)

if ! [[ $user_id =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
	echo "No valid user id detected from okapi token. Exiting."
	exit
fi

rm -rf tmp_import
mkdir tmp_import
cp "${infile}" tmp_import
cd tmp_import
split -l 1000 "${infile}"
rm "${infile}"


####################################

post_records() {
	currentfile="${1}"
	batchsize=$(wc -l ${currentfile} |cut -f1 -d " ")
	
	counter=$(($counter + $batchsize))
	batchuuid=$(uuidgen)

	#create MARC file out of ids if file detected to consist of ids

	if [[ ${idfile} == "yes" ]];then 

		sed -i 's/\(.*\)/{"leader":"00047cam a22000370  4500","fields":[{"001":"\1"}] }/' ${currentfile} 

		cat ${currentfile} | jq -nR   --arg BATCHUUID ${batchuuid} --argjson COUNTER ${counter} --argjson TOTAL ${numrecs} '
				{"initialRecords": [inputs as $RECORD 
				| {"record": $RECORD } ]}
				| .id = $BATCHUUID |.recordsMetadata.last = false | .recordsMetadata.counter = $COUNTER 
				| .recordsMetadata.total = $TOTAL | .recordsMetadata.contentType = "MARC_JSON" ' > tmp_processfile
	fi

	echo "Posting batch. $counter of $numrecs records sent"
	curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d @tmp_processfile "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/records"
}

#####################################

all_job_profiles=$(curl --http1.1 -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-import-profiles/jobProfiles?limit=1000")

jobProfileInfo=$(echo "${all_job_profiles}" |jq -rc ".jobProfiles[] | select(.name==\"${profileName}\") 
	|del(.userInfo) |del(.parentProfiles) |del(.childProfiles) | del(.hidden) |del(.metadata) |del(.deleted) |del(.description)")
jobProfileId=$(echo "${jobProfileInfo}" |jq -r .id)


if ! [[ $jobProfileId =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
	echo "No valid profile found. Exiting."
	exit
fi



apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "{\"sourceType\": \"ONLINE\", \"userId\": \"${user_id}\"}" "${okapi_url}/change-manager/jobExecutions")

parentJobExecutionId=$(jq -r .parentJobExecutionId <<< "${apicall}")

if ! [[ $parentJobExecutionId =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]];then
	echo "Failed to obtain parentJobExecutionId Exiting."
	echo
	echo "${apicall}"
	exit
fi

echo "Posting job profile"


apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${jobProfileInfo}" "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/jobProfile")

sleep 2

for recordfile in $(ls);do
	post_records ${recordfile} 
	total_arr+=($total) # array needed to remember variable outside loop
done

finalizePost="{ \"id\": \"$(uuidgen)\", \"recordsMetadata\": { \"last\": true, \"counter\": \"${numrecs}\", \"total\": \"${numrecs}\", \"contentType\":\"MARC_JSON\" }, \"initialRecords\": []}"

echo "Finalizing upload. FOLIO must still process records"

curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${finalizePost}" "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/records"

cd ..
rm -rf tmp_import

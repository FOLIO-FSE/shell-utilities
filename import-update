#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile="${1}"

profileName="ZKB Items, update on UUID"
profileName="Inventory Single Record - Default Create Instance"

if [[ "${profileName,,}" =~ "uuid" ]]; then infile="uuids";fi
if [[ "${profileName,,}" =~ "barcode" ]]; then infile="barcodes";fi

if [[ ! -f "${infile}" ]];then echo "You must supply a file named \"${infile}\""; exit;fi

echo "Matching on file named \"${infile}\""

batch=0
counter=0
SECONDS=0
OFFSET=0 
contentType="MARC_JSON"

if [[ ${infile} =~ mrc$ ]]; then
	contentType="MARC_RAW"
	cat "${infile}" |tr $'\x1d' '\n' |sed "/^$/d;s/$/\x1d/" > tmp_marc_json
	infile="tmp_marc_json"
fi

numrecs=$(wc -l ${infile} |cut -f1 -d " ")
echo "${numrecs} records detected"

total_arr=() # needed to remember variable from loop

idfile=$(head -1 "${infile}" |wc -c)

if [[ ${idfile} -lt 38 ]];then 
	idfile="yes"
	dos2unix "${infile}"
	echo "Identifier file of ${infile} detected. Building ${contentType} objects"
fi

user_id=$(cat okapi.token |base64 -di 2>/dev/null |jq -r 'select(.user_id != null) |.user_id' 2>/dev/null)

if ! [[ $user_id =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
	echo "No valid user id detected from okapi token. Exiting."
	exit
fi

rm -rf tmp_import
mkdir tmp_import
cp "${infile}" tmp_import
cd tmp_import
split -l 1000 "${infile}"
rm "${infile}"


####################################

post_records() {
	currentfile="${1}"
	batchsize=$(wc -l ${currentfile} |cut -f1 -d " ")
	
	counter=$(($counter + $batchsize))
	batchuuid=$(uuidgen)

	#create MARC file out of ids if file detected to consist of ids

	if [[ ${idfile} == "yes" ]];then sed -i 's/\(.*\)/{"leader":"00047cam a22000370  4500","fields":[{"001":"\1"}] }/' ${currentfile};fi

	cat ${currentfile} | jq -nR   --arg BATCHUUID ${batchuuid} --arg CONTENTTYPE ${contentType} --argjson COUNTER ${counter} --argjson TOTAL ${numrecs} '
			{"initialRecords": [inputs as $RECORD 
			| {"record": $RECORD } ]}
			| .id = $BATCHUUID |.recordsMetadata.last = false | .recordsMetadata.counter = $COUNTER 
			| .recordsMetadata.total = $TOTAL | .recordsMetadata.contentType = $CONTENTTYPE ' > tmp_processfile

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d @tmp_processfile "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/records")
	echo ${counter}
}

#####################################

all_job_profiles=$(curl --http1.1 -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-import-profiles/jobProfiles?limit=1000")

jobProfileInfo=$(echo "${all_job_profiles}" |jq -rc ".jobProfiles[] | select(.name==\"${profileName}\") 
	|del(.userInfo) |del(.parentProfiles) |del(.childProfiles) | del(.hidden) |del(.metadata) |del(.deleted) |del(.description)")
jobProfileId=$(echo "${jobProfileInfo}" |jq -r .id)


if ! [[ $jobProfileId =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
	echo "No valid profile found. Exiting."
	exit
fi



apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "{\"sourceType\": \"ONLINE\", \"userId\": \"${user_id}\"}" "${okapi_url}/change-manager/jobExecutions")

parentJobExecutionId=$(jq -r .parentJobExecutionId <<< "${apicall}")

if ! [[ $parentJobExecutionId =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]];then
	echo "Failed to obtain parentJobExecutionId Exiting."
	echo
	echo "${apicall}"
	exit
fi

echo "Posting job profile"


apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${jobProfileInfo}" "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/jobProfile")

sleep 2

for recordfile in $(ls);do
	counter=$(post_records ${recordfile})
	total_arr+=($total) # array needed to remember variable outside loop

        if [[ $SECONDS -gt 500 ]]; then
                auth 2>/dev/null || authn 2>/dev/null
		okapi_token=$(cat okapi.token)
                SECONDS=1
		OFFSET=$(($OFFSET + 1))
        fi

	TIMER=$(($OFFSET * 500 + $SECONDS))

        TIME=$TIMER;msg="$SECONDS seconds"
        if [[ $TIMER -gt 60 ]];then TIME=$(bc <<< "scale=1;$TIMER/60");msg="$TIME minutes";fi
        if [[ $TIMER -gt 3600 ]];then TIME=$(bc <<< "scale=1;$TIMER/3600");msg="$TIME hours     ";fi

        echo -en "Processing record $counter of $numrecs in $msg\r"
done

finalizePost="{ \"id\": \"$(uuidgen)\", \"recordsMetadata\": { \"last\": true, \"counter\": ${numrecs}, \"total\": ${numrecs}, \"contentType\":\"${contentType}\" }, \"initialRecords\": []}"

echo "Finalizing upload. FOLIO must still process records"

curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${finalizePost}" "${okapi_url}/change-manager/jobExecutions/${parentJobExecutionId}/records"

cd ..
rm -rf tmp_import tmp_marc_json

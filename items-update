tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

#############################################################################
# this script expects a file containing a list of search terms (by default id)
# that is run through the jq_replace or string_replace expressions before
# being reuploaded via batch sync API
##############################################################################

infile=items.json
outfile=item_update.log
searchtype="id"

batchsize=50


#jq_replace='.items[].effectiveLocationId="b9dc25a2-a7fb-48ad-8da5-8f68e35ba0af" '

#string_replace='s/80706534-8346-48d8-945a-9913d8f8833f/1ba579ad-525a-434b-aba5-b00b0364fe2e/g'

querydelim="%20or%20${searchtype}="
endpoint="${okapi_url}/item-storage/items?query="

rm -f ${outfile}

counter=0
numrecs=$(wc -l ${infile} |cut -d " " -f1)

while mapfile -t -n ${batchsize} ids && ((${#ids[@]})); do
	counter=$(($counter + ${#ids[@]}))

	# break array into space separated string
	idstring="${ids[@]}"
	querystring="id=${idstring// /${querydelim}}"

	records=$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${endpoint}${querystring}&limit=${batchsize}" )

	if [[ -z jq_replace ]];then
		updated_records=$(echo "${records}" |jq -c "${jq_replace} | del(.totalRecords) |del(.resultInfo)")
	fi

	if [[ -z string_replace ]];then
		updated_records=$(echo "${records}" |sed ${string_replace} | jq -c 'del(.totalRecords) |del(.resultInfo)')
	fi

	curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_records}" "${okapi_url}/item-storage/batch/synchronous?upsert=true" >> ${outfile}

	printf "Processing record %s of %s\r" $counter $numrecs

done < ${infile}

echo "Processed ${numrecs} records. Output was written to ${outfile}"




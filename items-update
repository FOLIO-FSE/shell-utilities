auth 2>/dev/null || authn 2>/dev/null
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)
SECONDS=1
OFFSET=0

#############################################################################
# this script expects a file containing a list of search terms (by default id)
# that is run through the jq_replace or string_replace expressions before
# being reuploaded via batch sync API
##############################################################################

#infile=uuids
infile=barcodes
outfile=item_update.log
#searchtype="id"
searchtype="barcode"
#

batchsize=50


#jq_replace='.items[].effectiveLocationId="b9dc25a2-a7fb-48ad-8da5-8f68e35ba0af" '
#jq_replace='.items[].permanentLocationId="618ac339-b867-492a-9c71-6140447d7bff" '
#jq_replace='.items[].temporaryLocationId="bb6ffec9-0b7e-459b-8d60-fc000bddf391" '
#jq_replace='.items[].permanentLoanTypeId="36dde437-be31-463a-8b6e-5ea8f2d523f7" '
#jq_replace='.items[].materialTypeId="b47ec2ce-5eb4-42ea-a610-777920b67943" '
#jq_replace='.items[].status.name="Aged to lost" '
#jq_replace='(del(.items[].volume)) '
#jq_replace='.items[].discoverySuppress=true '
jq_replace='.items[].notes[] |= if .itemNoteTypeId == "faa78286-5852-488c-b9d6-f2d1e6291dfd" then .note = "20240809" else . end'

#string_replace='s/d7ab0739-4ec3-4db7-905e-958b50118a1b/0bfb7f8b-76d1-4bfe-8046-2254ad987534/g'

querydelim="%20or%20${searchtype}="
endpoint="${okapi_url}/item-storage/items?query="

rm -f ${outfile}

counter=0
numrecs=$(wc -l ${infile} |cut -d " " -f1)

while mapfile -t -n ${batchsize} ids && ((${#ids[@]})); do

        if [[ $SECONDS -gt 500 ]]; then
                auth 2>/dev/null || authn 2>/dev/null
		okapi_token=$(cat okapi.token)
                SECONDS=1
		OFFSET=$(($OFFSET + 1))
		TIMER=$(($OFFSET * 500 + $SECONDS))
        fi

	counter=$(($counter + ${#ids[@]}))

	# break array into space separated string
	idstring="${ids[@]}"
	querystring="${searchtype}=${idstring// /${querydelim}}"

	records=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${endpoint}${querystring}&limit=${batchsize}" )

	if [[ -n ${jq_replace} ]];then
		updated_records=$(echo "${records}" |jq -c "${jq_replace} | del(.totalRecords) |del(.resultInfo)")
	fi

	if [[ -n ${string_replace} ]];then
		updated_records=$(echo "${records}" |sed ${string_replace} | jq -c 'del(.totalRecords) |del(.resultInfo)')
	fi

	curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_records}" "${okapi_url}/item-storage/batch/synchronous?upsert=true" >> ${outfile}

        TIME=$SECONDS;msg="$SECONDS seconds"
        if [[ $SECONDS -gt 60 ]];then TIME=$(bc <<< "scale=1;$SECONDS/60");msg="$TIME minutes";fi
        if [[ $SECONDS -gt 3600 ]];then TIME=$(bc <<< "scale=1;$SECONDS/3600");msg="$TIME hours     ";fi

	echo -en "Processing record $counter of $numrecs in $msg\r"

done < ${infile}

echo "Processed ${numrecs} records. Output was written to ${outfile}"




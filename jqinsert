#!/usr/bin/bash

if [[ -z ${4} ]];then
	echo "Maps values in a two column tab delimited file into a JSON document based on key matchpoint"
	echo
	echo "JSON key must be specified in jq syntax"
	echo
	echo "Usage: jqinsert [jsonfile] [mapfile] [matchkey] [newkey]"
	echo
	echo "jqinsert items.json item_status itemDamagedStatusId status"
	echo 
	echo "To insert within objects, the tsv file should contain objects. For example,"
	echo "to set .status name, the second column should contain {\"name\":\"somename\"}"
	echo
	echo	"To insert or add to arrays, the second column should be expressed as an array"
	echo  "Example\": [{\"itemNoteTypeId\":\"95fedc27-2417-4a58-9fe5-a70951998168\",\"note\":\"gift\"}]"
	echo
	exit
else
	json_file="${1}"
	map_file="${2}"
	matchkey="${3}"
	newkey="${4}"
	fileroot=$(echo "${json_file}" | sed 's/\.....\?$//')
	outfile="${fileroot}_remapped.json"
fi

jq -rRn '
	 reduce inputs as $line ({};
		($line | split("\t") | .[0]) as $key |
		($line | split("\t") | .[1]) as $value |
		. + { ($key): $value }
	)
' ${map_file} > tmp_map

pv  ${json_file} | jq -c --argfile key_value tmp_map --arg MATCHKEY "${matchkey}" --arg NEWKEY "${newkey}" '
	(if .[$MATCHKEY] != null then ($key_value[.[$MATCHKEY]] // null) else null end) as $value
		| if $value != null and ($value | test("^[\\[{]")) then
		($value | fromjson) as $parsed
			| if has($NEWKEY) then
			 if (.[$NEWKEY] | type) == "array" then
				.[$NEWKEY] += $parsed
			 elif (.[$NEWKEY] | type) == "object" and ($parsed | type) == "object" then
				.[$NEWKEY] += $parsed
			 else
				. + { ($NEWKEY): $parsed }
			 end
		  else
			 . + { ($NEWKEY): $parsed }
		  end
	 else if $value != null then
		if has($NEWKEY) then
		  if (.[$NEWKEY] | type) == "array" then
			 .[$NEWKEY] += [$value]
		  else
			 . + { ($NEWKEY): $value }
		  end
		else
		  . + { ($NEWKEY): $value }
		end
	 else
		.
	 end
  end
' > ${outfile}

rm tmp_map
echo "A remapped file has been sent to ${outfile}"
echo

auth 2>/dev/null || authn 2>/dev/null
# Expects data in delimited file named licenses
#
# Terms are mapped by their labels, list items by term uuid and normalized value
infile=licenses_core.txt

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A dict_org_uuid
declare -A dict_org_name
declare -A dict_term_uuid
declare -A dict_term_values

declare -a term_uuids
declare -a term_desc
declare -a term_labels
declare -a term_values

orgrole="licensor" # make sure this is defined in the system
orgrole="2c91808d92915a650192951afb450001" # make sure this is defined in the system
orgrole='{ "_delete": false, "role": { "id": "2c91808d92915a650192951afb450001" } }'

picklists=$(curl -s -w '\n' -X GET \
  -H "Accept: application/json" \
  -H "X-Okapi-Tenant: ${tenant}" \
  -H "x-okapi-token: ${okapi_token}" \
  "${okapi_url}/licenses/refdata?query=cql.allRecords=1&perPage=100000")

term_uuids=($(echo ${picklists} |jq -r '.[].id' |tr -cd "[0-9a-zA-Z\-\n]"))
term_desc=($(echo ${picklists} |jq -r '.[].desc' |tr -cd "[0-9a-zA-Z\-\n]"))
term_values=($(echo ${picklists} |jq -r '.[] | [ .values[].value ] |join("^")' ))
term_labels=($(echo ${picklists} |jq -r '.[] |  [ .values[].label ] |join("^")' |tr -d " " |tr [A-Z] [a-z] ))

# a bunch of arrays need to be glued together using index position

counter=0
# declare scalar arrays pointing from term type to uuid
for key in "${term_desc[@]}";do
	declare -A "dict_${term_desc}"
	dict_term_uuid[${key}]="${term_uuids[$counter]}"

	#populate the individual dropdown items, prefix with term uuid
	IFS='^' read -r -a label_arr <<< "${term_values[$counter]}"

	for entry in "${label_arr[@]}";do	
		tempval="${term_uuids[${counter}]}${entry}"
		dict_term_values[${tempval}]="${entry}"
	done

	counter=$(($counter + 1))
done


# convert org codes into a scalar array pointing to UUIDs
apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/organizations?limit=100000")

eval "$(echo ${apicall} |  jq -r '.organizations[] | @sh "dict_org_uuid[\(.code|tostring)]=\(.id|tostring)"')"
eval "$(echo ${apicall} |  jq -r '.organizations[] | @sh "dict_org_name[\(.code|tostring)]=\(.name|tostring)"')"

while IFS=$'\n' read line;do
	line=$(echo "${line}" |tr "\t" "|")
	IFS='|' read  name type altname description orgcode openended notes <<< ${line}
	notes=$(echo -e "${notes}" |xargs -0 |jq -aRs)

	id=$(uuidgen)

	type=${type,,}
	if [[ $openended =~ N ]];then openended="false";fi
	if [[ $openended =~ Y ]];then openended="true";fi
	if [[ -z $openended ]];then openended="false";fi
	if [[ ${#altname} -gt 1 ]];then altname="{\"_delete\":false,\"name\":\"${altname}\"}";fi

	#contact='{ "_delete": false, "user": "ba3c643b-87fc-4b03-880a-29151174a2fd", "role": "erm_librarian" }'

	if [[ ! -z $orgcode ]];then
		if [[ "${dict_org_name[${orgcode}]+abc}" ]];then
			orgs="{ \"_delete\": false, \"primaryOrg\":true, \"org\": { \"name\": \"${dict_org_name[${orgcode}]}\", \"orgsUuid\": \"${dict_org_uuid[${orgcode}]}\" }, \"roles\": [ ${orgrole} ] }"
		fi
	fi

IFS='' read -r -d '' license << EndOfLicense
{
  "links": [],
  "customProperties": {},
  "description": "${description}",
  "tags": [],
  "docs": [
    {
      "_delete": false,
      "name": "License",
      "location": ${location}
    }
  ],
  "name": "${name}",
  "status": "active",
  "type": "${type}",
  "supplementaryDocs": [],
  "_links": {
    "linkedResources": {
      "href": "/licenses/licenseLinks?filter=owner.id%"
    }
  },
  "openEnded": ${openended},
  "amendments": [],
  "orgs": [${orgs}],
  "alternateNames": [${altname}],
  "id": "${id}"
}

EndOfLicense

curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${license}" "${okapi_url}/licenses/licenses"

counter=$((${counter} + 1))

done < ${infile}

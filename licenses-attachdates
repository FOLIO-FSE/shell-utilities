#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
# Script expects a delimited file with name of license in first column and name of organization in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A license_dict
declare -A organization_dict

infile="license-dates.tsv"
# license name, start date, end date (YYYY-MM-DD)
all_licenses=""

offset=0
recsretrieved=100

# retrieve all licenses and add to array
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/licenses/licenses?sort=name%3Bdesc&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Licenses retrieved\r" $totalrecs

	all_licenses="${all_licenses}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Licenses retrieved"

# load licenses into scalar array keyed by downcased name
eval "$(echo ${all_licenses} |jq -r '. | @sh "license_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing License keys"
counter=0
# normalize keys
for key in "${!license_dict[@]}";do
	newkey=${key//[^a-z0-9]/}
	license_dict[${newkey}]=${license_dict["${key}"]}

	if (( $counter % 10 == 0 ));then
		printf "%s keys normalized\r" $counter
	fi
	counter=$(($counter + 1))
done
echo "$counter keys normalized"

# attach date

while  IFS=$'\n' read -r line; do
	line=$(tr "\t" "^" <<< ${line})
	IFS='^' read -r license startDate endDate <<< ${line}
	comparelicensekey=$(tr -dc "[0-9a-z]" <<< "${license,,}")
	license_record="${license_dict[$comparelicensekey]}"

        startDate=${startDate//[^0-9\-]/}
        endDate=${endDate//[^0-9\-]/}
        if [[ ! ${endDate} =~ ^[12][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]$ ]];then endDate="";fi
        if [[ ! ${startDate} =~ ^[12][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]$ ]];then startDate=$(date -I);fi

	if [[ ${license_record} =~ [a-z0-9A-Z] ]];then
		license_uuid=$(echo ${license_record} |jq -r .id)
		# fix json and PUT
		record=$(echo "${license_record}" | jq ".startDate = \"${startDate}\" | .endDate = \"${endDate}\"")

		curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/licenses/licenses/${license_uuid}"
	else 
		echo "${license} License not found"
	fi
	
done < ${infile}


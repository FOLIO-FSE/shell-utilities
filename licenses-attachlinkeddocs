# Script expects a delimited file with name of license in first column and location of data file to upload in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A license_dict

all_licenses=""
infile="docs.tsv"

offset=0
recsretrieved=100

# retrieve all records
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/licenses/licenses?sort=name%3Bdesc&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s records retrieved\r" $totalrecs

	all_licenses="${all_licenses}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs records retrieved"

# load licenses into scalar array keyed by downcased name
eval "$(echo ${all_licenses} |jq -r '. | @sh "license_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing keys"

counter=0

regex="[\'\"\\/\\\| ]"

for key in "${!license_dict[@]}";do
        newkey=${key//${regex}/}
        license_dict[${newkey}]=${license_dict["${key}"]}

        if (( $counter % 10 == 0 ));then
                printf "%s keys normalized\r" $counter
        fi
        counter=$(($counter + 1))
done

while IFS=$'\t' read -r license docname location;do
        notes='""'
        location=$(echo -n ${location} |jq -aRs)
	comparekey=${license//${regex}/}
	comparekey=${license,,}
	record="${license_dict[$comparekey]}"

	if [[ ${record} =~ [a-z0-9A-Z] ]];then
		record_uuid=$(echo ${record} |jq -r .id)
		docid=$(echo ${record} |jq -r .id)

		# fix json and PUT

		# use for urls
		#record=$(echo "${record}" | jq ".docs = [{ \"id\": \"${docid}\", \"url\": ${location}, \"name\": \"${docname}\" }]")
		
		# use for physical locations
		record=$(echo "${record}" | jq ".docs = [{ \"id\": \"${docid}\", \"location\": ${location}, \"name\": \"${docname}\" }]")

		curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/licenses/licenses/${record_uuid}"
	else
		echo "${license} not found"
	fi
done < ${infile}


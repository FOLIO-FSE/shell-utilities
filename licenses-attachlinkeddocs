# Script expects a delimited file with name of license in first column and location of data file to upload in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A license_dict

all_licenses=""

offset=0
recsretrieved=100

# retrieve all records
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/licenses/licenses?sort=name%3Bdesc&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s records retrieved\r" $totalrecs

	all_licenses="${all_licenses}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs records retrieved"

# load licenses into scalar array keyed by downcased name
eval "$(echo ${all_licenses} |jq -r '. | @sh "license_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing keys"
# normalize keys

counter=0
# normalize keys
for key in "${!license_dict[@]}";do
        newkey=${key//[^a-z0-9]/}
        license_dict[${newkey}]=${license_dict["${key}"]}

        if (( $counter % 10 == 0 ));then
                printf "%s keys normalized\r" $counter
        fi
        counter=$(($counter + 1))
done
echo "$counter keys normalized"
# attach docs

while IFS=$'\t' read -r license docname location notes;do
        notes=$(echo ${notes} |jq -aRs |sed "s/|/\\\n/g" )
        location=$(echo ${location} |tr -d "\n" |jq -aRs)
	comparekey=$(tr -dc "[0-9a-z]" <<< "${license,,}")
	record="${license_dict[$comparekey]}"

	if [[ ${record} =~ [a-z0-9A-Z] ]];then
		record_uuid=$(echo ${record} |jq -r .id)
		docid=$(echo ${record} |jq -r .docs[0].id)

		# fix json and PUT
		record=$(echo "${record}" | jq ".docs = [{ \"id\": \"${docid}\", \"location\": ${location},\"note\": ${notes}, \"name\": \"${docname}\" }]")

		curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/licenses/licenses/${record_uuid}"
	else
		echo "${license} not found"
	fi
	
done < docs.tsv


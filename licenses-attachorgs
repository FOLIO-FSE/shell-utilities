# Script expects a delimited file with name of license in first column and name of organization in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A license_dict
declare -A org_dict

infile="license-org.tsv"
role="licensor" # make sure this is defined in the system
# this script will force a primary organization
#
# Orgs are keyed off code. Switch statement to key by name

all_licenses=""
all_organizations=""

offset=0
recsretrieved=100

# retrieve all records
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/organizations?query=%28status%3D%3D%22Active%22%29+sortby+name%2Fsort.ascending&limit=100&offset=$offset" |jq .organizations)

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Organizations retrieved\r" $totalrecs

	all_organizations="${all_organizations}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Organizations retrieved"
echo "${all_organizations}" > orgs

# load organizations into scalar array keyed by downcased code
eval "$(echo ${all_organizations} |jq -r '. | select(.name |test("[a-zA-Z]"))| @sh "org_dict[\(.code|tostring|ascii_downcase)]=\(.|tostring)"')"

echo "Normalizing Organization keys"
# normalize keys
counter=0
for key in "${!org_dict[@]}";do
	newkey=${key//[^a-z0-9]/}
	org_dict[${newkey}]=${org_dict["${key}"]}

        if (( $counter % 10 == 0 ));then
                printf "%s keys normalized\r" $counter
        fi
        counter=$(($counter + 1))
done
echo "$counter keys normalized"

offset=0
recsretrieved=100

# retrieve all licenses and add to array
while [[ $recsretrieved -eq 100 ]] ;do
	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/licenses/licenses?sort=name%3Bdesc&perPage=100&offset=$offset")

	recsretrieved=$(echo ${apicall} |jq '. |length')
	totalrecs=$(($offset + $recsretrieved))
	printf "%s Licenses retrieved\r" $totalrecs

	all_licenses="${all_licenses}$(echo ${apicall} |jq .[])"
	offset=$(($offset + 100))
	done

echo "$totalrecs Licenses retrieved"

# load licenses into scalar array keyed by downcased name
eval "$(echo ${all_licenses} |jq -r '. | @sh "license_dict[\(.name|tostring|ascii_downcase)]=\(.|tostring)"')"

#################################################### routine blow replaces the old file
for org_key in "${!org_dict[@]}";do
	for license_key in "${!license_dict[@]}";do
		if [[ ${license_key} =~ ${org_key} ]];then
			license_record="${license_dict[${license_key}]}"
			organization_record="${org_dict[${org_key}]}"

			license_uuid=$(echo ${license_record} |jq -r .id)

			organization_uuid=$(echo ${organization_record} |jq -r .id)
			organization_name=$(echo ${organization_record} |jq -r .name)

			echo "${org_key} is being linked to ${license_key}"

			record=$(echo "${license_record}" | jq ".orgs = [ { \"id\": \"${id_owner}\", \"primaryOrg\": true, \"org\": {\"orgsUuid\": \"${organization_uuid}\", \"name\": \"${organization_name}\" }, \"roles\": [{\"owner\": { \"id\": \"${id_owner}\"}, \"role\":  \"${role}\" } ]}] ")
			curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/licenses/licenses/${license_uuid}" 
		fi
	done
done
exit
##################################################### retaining old match for now, but ignores file

echo "Normalizing License keys"
# normalize keys

counter=0
# normalize keys
for key in "${!license_dict[@]}";do
        newkey=${key//[^a-z0-9]/}
        license_dict[${newkey}]=${license_dict["${key}"]}

        if (( $counter % 10 == 0 ));then
                printf "%s keys normalized\r" $counter
        fi
        counter=$(($counter + 1))
done
echo "$counter keys normalized"


# attach organization 

while IFS=$'\t' read -r license organization;do
	comparelicensekey=$(tr -dc "[0-9a-z]" <<< "${license,,}")
	license_record="${license_dict[$comparelicensekey]}"

	compareorganizationkey=$(tr -dc "[0-9a-z]" <<< "${organization,,}")
	organization_record="${org_dict[$compareorganizationkey]}"

	if [[ ${license_record} =~ [a-z0-9A-Z] ]];then
		license_uuid=$(echo ${license_record} |jq -r .id)
		 if [[ ${organization_record} =~ [a-z0-9A-Z] ]];then
			organization_uuid=$(echo ${organization_record} |jq -r .id)
			organization_name=$(echo ${organization_record} |jq -r .name)
			id_owner=$(uuidgen)

			record=$(echo "${license_record}" | jq ".orgs = [ { \"id\": \"${id_owner}\", \"primaryOrg\": true, \"org\": {\"orgsUuid\": \"${organization_uuid}\", \"name\": \"${organization_name}\" }, \"roles\": [{\"owner\": { \"id\": \"${id_owner}\"}, \"role\":  \"${role}\" } ]}] ")
			curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/licenses/licenses/${license_uuid}" 

		else
			echo "${organization} Organization not found"
		fi
	else 
		echo "${license} License not found"
	fi
	
done < ${infile}



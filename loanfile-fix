#!/usr/bin/awk -f
#

# Be sure to add a line for each date to be fixed and tweak to match format
#
# expected headers are item_barcode, out_date, due_date, renewal_count, patron_barcode, next_item_status


# Be sure to change separator for date (usually dash or slash) 

function fixdate(value)
{
	gsub(/ .*/, "", value)
	
	if (value ~ /^[0-9]*-[0-9]*-[0-9]*$/) {
		split(value, datearr, datesep)
		retval = sprintf("%04d-%02d-%02d", datearr[3], datearr[1], datearr[2])
	} else {retval = ""}

	return retval

}

BEGIN{FS=OFS="\t";counter = 0;badrecs = 0;datesep = "-" }

{

	if (NR == 1) {
		numfields = NF

		for (i=1;i<=NF;i++) {
			switch($i) {
				case "item_barcode":
					item_barcode=i
					$i = "item_barcode"
					break
				case "patron_barcode":
					patron_barcode=i
					$i = "patron_barcode"
					break
				case "out_date":
					out_date=i
					$i = "out_date"
					break
				case "due_date":
					due_date=i
					$i = "due_date"
					break
				case "renewal_count":
					renewal_count=i
					$i = "renewal_count"
					break
				case "next_item_status":
					next_item_status=i
					$i = "next_item_status"
					break
				}
		} 

		print "item_barcode\tpatron_barcode\tout_date\tdue_date\trenewal_count\tnext_item_status" > "open_loans.tsv"

	} else {
		gsub("\"", "", $item_barcode)
		gsub("\"", "", $patron_barcode)
		gsub("\"", "", $out_date)
		gsub("/", "-", $out_date)
		gsub("\"", "", $due_date)
		gsub("/", "-", $due_date)
		gsub("\"", "", $renewal_count)
	
		gsub(/"/, "", $0)
	
		counter++
		$out_date = fixdate($out_date) # 
		$due_date = fixdate($due_date) # 
		
		print $item_barcode, $patron_barcode, $out_date, $due_date, $renewal_count, "Checked out" >> "open_loans.tsv" 
	
		if (counter % 100 == 0) {
			printf "%s records\r", counter
		}
	}

}
END{ print counter" records were processed" }

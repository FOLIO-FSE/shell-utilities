# Creates location based on contents of tab delimited file
#
# Code is expected in column 1 of a file named "locations"
# Display name is set in column 2

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile="locations.tsv"

declare -A dict_servicepoints
declare -A dict_campuses
declare -A dict_libraries

institutionId="17548174-55b9-477f-8033-1025c0add488"
campus_default="7d5ffec2-5521-4a65-b927-4006742bcecc"
library_default="3292f1c0-8b0a-4954-b855-48e0fe792710"

servicepoint_default="56ae7175-7c84-4058-aa6f-3075cdb06957"


# get list of campuses with code as key and uuid as value
eval "$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/location-units/campuses?limit=1000" |  jq -r '.loccamps[] | @sh "dict_campuses[\(.code|tostring|ascii_downcase)]=\(.id|tostring)"')"

# get list of libraries with code as key and uuid as value
eval "$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/location-units/libraries?limit=1000" |  jq -r '.loclibs[] | @sh "dict_libraries[\(.code|tostring|ascii_downcase)]=\(.id|tostring)"')"

# get list of service points with code as key with uuid as value
eval "$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/service-points?limit=1000" |  jq -r '.servicepoints[] | @sh "dict_servicepoints[\(.code|tostring|ascii_downcase)]=\(.id|tostring)"')"
echo "Normalizing campus, library, and servicepoint keys"

for key in "${!dict_campuses[@]}";do
        newkey=$(tr -dc [a-z0-9] <<< "${key}")
        dict_campuses[${newkey}]=${dict_campuses["${key}"]}
done

for key in "${!dict_libraries[@]}";do
        newkey=$(tr -dc [a-z0-9] <<< "${key}")
        dict_libraries[${newkey}]=${term_dict["${key}"]}
done

for key in "${!dict_servicepoints[@]}";do
        newkey=$(tr -dc [a-z0-9] <<< "${key}")
        dict_servicepoints[${newkey}]=${dict_servicepoints["${key}"]}
done

#while IFS=$'\t' read -r code discovery name
while IFS=$'\t' read -r library servicepoint code
do
	comparecampus=$(tr -dc [a-z0-9] <<< "${campus,,}")
	comparelibrary=$(tr -dc [a-z0-9] <<< "${library,,}")
	compareservicepoint=$(tr -dc [a-z0-9] <<< "${servicepoint,,}")

	if [[ -z ${campus} ]];then 
		campusId="${campus_default}"
	else
		comparecampus=$(tr -dc [a-z0-9] <<< "${comparecampus,,}")
		campusId=${dict_campus[${comparecampus}]}

		if [[ ! ${campusId} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
			campusId="${campus_default}"
		fi
	fi

	if [[ -z ${library} ]];then 
		libraryId="${library_default}"
	else
		comparelibrary=$(tr -dc [a-z0-9] <<< "${comparelibrary,,}")
		libraryId=${dict_library[${comparelibrary}]}

		if [[ ! ${libraryId} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
			libraryId="${library_default}"
		fi
	fi

	if [[ -z ${servicepoint} ]];then 
		servicepointId="${servicepoint_default}"
	else
		compareservicepoint=$(tr -dc [a-z0-9] <<< "${compareservicepoint,,}")
		servicepointId=${dict_servicepoint[${compareservicepoint}]}

		if [[ ! ${servicepointId} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
			servicePointId="${servicepoint_default}"
		fi
	fi

	if [[ -z ${discovery} ]];then discovery="${code}"; fi 
	if [[ -z ${name} ]];then name="${discovery}"; fi 


IFS='' read -r -d '' location << EndOfLocation

{
"code": "${code}",
"discoveryDisplayName": "${discovery}",
"name": "${name}",
"isActive": true,
"institutionId": "${institutionId}",
"campusId": "${campusId}",
"libraryId": "${libraryId}",
"primaryServicePoint": "${servicePointId}",
"servicePointIds": [
"${servicePointId}"
],
"servicePoints": []
}
EndOfLocation

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${location}" "${okapi_url}/locations")

	echo -e "${apicall}" |jq '.'
done < ${infile}



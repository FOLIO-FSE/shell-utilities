tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile=infile # expects UUID + value
outfile=marc_update.log

SECONDS=0
counter=0
numrecs=$(wc -l ${infile} |cut -d " " -f1)

batchsize=2

rm -f ${outfile}

if [[ -z ${infile} ]];then echo "The input file ${infile} could not be found";exit;fi

add_field() {
	local instance_uuid=${1}
	local seq=${2}
	local value=${3}
	local record
	local version
	local parsedRecordId
	local newfield


	newfield='[{ "tag": "035", "content": "$a (OCoLC)'${value}'", "indicators": [ "\\", "\\" ], "isProtected": false }]'

	record=$(curl -s -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/records-editor/records?externalId=${instance_uuid}") 

	version=$(curl -s -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/instance-storage/instances/${instance_uuid}" |jq -r ._version) 

	parsedRecordId=$(echo "${record}" | jq -r .parsedRecordId)

	record=$(echo "${record}" |jq --arg VERSION ${version} --argjson NEWFIELD "${newfield}" '.relatedRecordVersion = $VERSION | (.fields= .fields + $NEWFIELD)')
	
	curl --http1.1 -s -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/records-editor/records/${parsedRecordId}" > tmp_marcupdate.${seq}

}

counter=0
SECONDS=1

while mapfile -t -n ${batchsize} lines && ((${#lines[@]})); do
	seq=0
	for line in "${lines[@]}";do
		IFS=$'\t' read -r instance_uuid value <<< "${line}"

		add_field "${instance_uuid}" "${seq}" "${value}" &

		counter=$((counter + 1))
		seq=$((seq + 1))
	done
	wait

	cat tmp_marcupdate.* >> ${outfile}
	rm tmp_marcupdate.*

        TIME=$SECONDS;msg="$SECONDS seconds"
        if [[ $SECONDS -gt 60 ]];then TIME=$(bc <<< "scale=1;$SECONDS/60");msg="$TIME minutes";fi
        if [[ $SECONDS -gt 3600 ]];then TIME=$(bc <<< "scale=1;$SECONDS/3600");msg="$TIME hours     ";fi
	
	echo -en "Processing record $counter of $numrecs in $msg\r"

done < ${infile}

echo "Processed record $counter of $numrecs in $msg          "

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A category_dict
counter=0

# load categories into dictionary

eval "$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/categories?limit=100000" |  jq -r '.categories[] | @sh "category_dict[\(.value|tostring|ascii_downcase)]=\(.id|tostring)"')"

build_contact() {

IFS='' read -r -d '' contact << EndOfContact
{
  "firstName": "${fname}",
  "lastName": "${lname}",
  "notes": "${notes}",
  "phoneNumbers": [${phones}], 
  "emails": [${emails}], 
  "categories": [${categories}],
  "id": "${contact_uuid}"
}

EndOfContact
echo ${contact}

}

get_organization() {

	# get organization by code
	apicall=$(curl -G -s -w '\n' -X GET \
  	  -H "Accept: application/json" \
  	  -H "X-Okapi-Tenant: ${tenant}" \
  	  -H "x-okapi-token: ${okapi_token}" \
  	  --data-urlencode "query=code=${code}" \
  	  "${okapi_url}/organizations/organizations")

	organization=$(jq .organizations[] <<< ${apicall})
	echo "${organization}"
}


#########################################################################

while IFS=$'\n' read -r line;do
	line=$(tr "\t" "^" <<< ${line})
	IFS='^' read -r code lname fname cat email phone <<< ${line}

	if [[ ${code} == "" ]];then continue; fi

	contact_uuid=$(uuidgen)
	emails=categories=phones=""
	goodrecord=0

	# makes sure first and last name are populated
	if [[ ${fname} !=  "" ]] || [[ ${lname} != "" ]];then goodrecord=1;fi

	if [[ $goodrecord == "0" ]];then 
		if [[ ${phone} =~ [0-9] ]] || [[  "$email" =~ "@" ]];then
			fname=" "
			lname="${code}"
			goodrecord=1
		fi
	fi

	if [[ $goodrecord == "0" ]];then 
		echo "No name found for ${code}"
		continue
	fi

	if [[ $goodrecord == "1" ]];then 
		if [[ ${fname} ==  "" ]];then fname=" ";fi	
		if [[ ${lname} ==  "" ]];then lname=" ";fi	
	
	fi

	if [[ ${phone} =~ [0-9] ]]; then phones="{ \"phoneNumber\" : \"${phone}\", \"isPrimary\" : true, \"categories\" : [] }";fi
	
	if [[ "$email" =~ "@" ]];then emails="{ \"value\" : \"${email}\", \"isPrimary\" : true, \"categories\" : [] }";fi

	if [[ ${cat} != "" ]];then
		cat=${cat,,}
		cat=${category_dict[${cat}]}
		
		if [[ "$cat" =~ [a-f] ]];then categories="\"${cat}\"";fi
	fi

	contact=$(build_contact)

	# get organization by code
	organization=$(curl -G -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" --data-urlencode "query=code=${code}" "${okapi_url}/organizations/organizations" |jq .organizations[])


	updated_organization=$(jq ".contacts += [\"${contact_uuid}\"]" <<< ${organization})
	org_uuid=$(jq -r .id <<< ${updated_organization})

	if [[ ! ${org_uuid} =~ [a-f] ]];then
		echo "No organization found for ${code}"
		continue
	fi

	echo "Processing $code -- record $counter"

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${contact}" "${okapi_url}/organizations-storage/contacts")

	echo ${apicall}

	updated_organization=$(jq ".contacts += [\"${contact_uuid}\"]" <<< ${organization})

	apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_organization}" "${okapi_url}/organizations-storage/organizations/${org_uuid}")

	echo ${apicall}

	counter=$((counter + 1))

done < contacts.tsv


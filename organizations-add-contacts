tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A category_dict
counter=1

infile="org_contact.tsv"
dos2unix infile

numrecs=$(wc -l ${infile} |cut -d " " -f1)

# load categories into dictionary

eval "$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/categories?limit=100000" |  jq -r '.categories[] | @sh "category_dict[\(.value|tostring|ascii_downcase)]=\(.id|tostring)"')"

build_contact() {

IFS='' read -r -d '' contact << EndOfContact
{
  "firstName": "${fname}",
  "lastName": "${lname}",
  "notes": ${notes},
  "phoneNumbers": [${phones}], 
  "emails": [${emails}], 
  "categories": ${categories},
  "id": "${contact_uuid}"
}

EndOfContact
echo ${contact}

}

parse_contact() {
	lname=" "
	fname=" "
	names=$(echo ${contact} |sed 's/\$.*//')
	lname=$(echo ${names} |sed 's/.* //')
	fname=$(echo ${names} |sed "s/ ${lname}//")
	email=$(echo ${contact} |grep -o '[a-zA-Z0-9._-]\+@[a-zA-Z0-9._-]\+\.[a-zA-Z0-9_-]\+')
	phone=$(echo ${contact} |grep -o '\(([0-9]\{3\})\|[0-9]\{3\}\)[ -]\?[0-9]\{3\}[ -]\?[0-9]\{4\}\(.*ext.*\)\?')
	notes=$(echo ${contact} |sed 's/^[^\$]*\$//' |sed 's/\$/\n/g' |jq -aRs)
}


#########################################################################

while IFS=$'\n' read -r line;do
	line=$(echo "${line}" |tr "\t" "^" | tr -d '"')
	IFS='^' read -r code lname fname title note email description category1 category2 <<< ${line}
	#IFS='^' read -r code contact <<< ${line}

	notes=$(echo -n "${note}" |jq . -aRs)

	# Remove this remark for parsing unstructured info from Sierra systems
	#parse_contact

	contact_uuid=$(uuidgen)
	emails=""
	phones=""
	goodrecord=0

	# makes sure first and last name are populated
	if [[ ${fname} !=  "" ]] || [[ ${lname} != "" ]];then goodrecord=1;fi

	if [[ $goodrecord == "0" ]];then 
		if [[ ${phone} =~ [0-9] ]] || [[  "$email" =~ "@" ]];then
			fname=" "
			lname="${code}"
			goodrecord=1
		fi
	fi


	if [[ $goodrecord == "0" ]];then 
		echo "No name found for ${code}"
		continue
	fi

	if [[ $goodrecord == "1" ]];then 
		if [[ ${fname} ==  "" ]];then fname=" ";fi	
		if [[ ${lname} ==  "" ]];then lname=" ";fi	
	
	fi

	categories="[]"

	if [[ ${category1} != "" ]];then
		cat="${cat,,}"
		cat="${category_dict[${cat}]}"
		if [[ "$cat" =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f] ]];then categories=$(echo "${categories}" |jq -rc --arg CAT "${cat}" ' . += [ $CAT ]');fi
	fi
	if [[ ${category2} != "" ]];then
		cat="${cat,,}"
		cat="${category_dict[${cat}]}"
		if [[ "$cat" =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f] ]];then categories=$(echo "${categories}" |jq -rc --arg CAT "${cat}" ' . += [ $CAT ]');fi
	fi

	if [[ ${phone} =~ [A-Z0-9] ]]; then phones="{ \"phoneNumber\" : \"${phone}\", \"isPrimary\" : true, \"categories\" : ${categories} }";fi
	if [[ "$email" =~ "@" ]];then emails="{ \"value\" : \"${email}\", \"isPrimary\" : true, \"categories\" : ${categories} }";fi


	contact=$(build_contact)

	if [[ ${phone2} =~ [0-9] ]]; then contact=$(echo "${contact}" | jq ".phones += [ { \"phoneNumber\" : \"${phone2}\", \"isPrimary\" : false, \"categories\" : ${categories} } ]");fi
	if [[ ${phone3} =~ [0-9] ]]; then contact=$(echo "${contact}" | jq ".phones += [ { \"phoneNumber\" : \"${phone3}\", \"isPrimary\" : false, \"categories\" : ${categories} } ]");fi

	# get organization by code
	organization=$(curl -G -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" --data-urlencode "query=code=${code}" "${okapi_url}/organizations/organizations" |jq '.organizations[] | del(.metadata)')

	updated_organization=$(jq ".contacts += [\"${contact_uuid}\"]" <<< ${organization})
	org_uuid=$(jq -r .id <<< ${updated_organization})

	if [[ ! ${org_uuid} =~ [a-f] ]];then
		echo "No organization found for ${code}"
		continue
	fi

	echo "Processing $code -- record $counter of $numrecs"

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${contact}" "${okapi_url}/organizations-storage/contacts")

	echo ${apicall}

	updated_organization=$(jq ".contacts += [\"${contact_uuid}\"]" <<< ${organization})

	apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_organization}" "${okapi_url}/organizations-storage/organizations/${org_uuid}")

	echo ${apicall}

	counter=$((counter + 1))
done < ${infile}


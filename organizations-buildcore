tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile="vendors.tsv"
outfile="organization_create.log"

use_deterministic_uuids="yes"
dos2unix ${infile}

acqunit=""
if [[ ${acqunit} != "" ]];then acqunit="\"${acqunit}\"";fi
acq_prefix=""

numrecs=$(wc -l ${infile} |cut -d " " -f1)

declare -A orgtype_dict
declare -A category_dict

org_types=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/organization-types?query=cql.allRecords=1%20sortby%20name&limit=2000")

eval "$(echo ${org_types} |jq -r '.organizationTypes[] | @sh "orgtype_dict[\(.name|tostring)]=\(.id|tostring)"')"

cat_types=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/organizations-storage/categories?query=cql.allRecords=1%20sortby%20value&limit=2000")

eval "$(echo ${cat_types} |jq -r '.categories[] | @sh "category_dict[\(.value|tostring)]=\(.id|tostring)"')"

#####################################


create_org_record() {
	local org=apicall=uuid=name=code=status=alias=address=addr1_line1=addr1_line2=addr1_city=addr1_state=addr1_zip=country=phone=fax=email=url=currencies=accountnum=orgtype=paymenttype=currency=categories=cat1=cat2=cat3=cat4=""
	
	local seq="${1}"
	local line="${2}"

	line=$(echo "${line}" |tr "\t" "^" |tr -d '"' |jq -aRs |sed 's/\\n//;s/^"//;s/"$//')

	IFS='^' read -r code name alias addr1_line1 addr1_line2 addr1_city addr1_state addr1_zip country phone fax email url notes orgtype isvendor paymenttype accountnum currency cat1 cat2 cat3 cat4 <<< ${line}

	status="Active"
	code=$(echo "${code}" |xargs)
	
	if [[ ${name} == "" ]]; then name="${code}";fi
	code="${acq_prefix}${code}"

	# uuid needs to be global. Note that repair/addition tools can't assume deterministic uuids
	uuid=$(uuidgen --sha1 -n 8405ae4d-b315-42e1-918a-d1919900cf3f -N "${okapi_url}:organizations:${code}")

	if [[ ${alias} != "" ]]; then alias="{\"value\":\"${alias}\"}";fi

	if [[ ${cat1} != "" ]]; then 
		if [[ ${category_dict[${cat1}]} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]]; then
			categories="\"${category_dict[${cat1}]}\""
		fi
	fi
	if [[ ${cat2} != "" ]]; then 
		if [[ ${category_dict[${cat2}]} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]]; then
			categories="${categories}\"${category_dict[${cat2}]}\""
		fi
	fi
	if [[ ${cat3} != "" ]]; then 
		if [[ ${category_dict[${cat3}]} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]]; then
			categories="${categories}\"${category_dict[${cat3}]}\""
		fi
	fi
	if [[ ${cat4} != "" ]]; then 
		if [[ ${category_dict[${cat4}]} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]]; then
			categories="${categories}\"${category_dict[${cat4}]}\""
		fi
	fi
	categories=$(sed 's/""/","/g' <<< "${categories}")

	if [[ ${currency} =~ ^[A-Z][A-Z][A-Z]$ ]]; then currency="\"${currency}\"";fi
	if [[ ${phone} != "" ]]; then phone="{ \"phoneNumber\" : \"${phone}\", \"type\":\"Office\", \"isPrimary\" : true, \"categories\" : [] }";fi
	if [[ ${email} =~ @ ]]; then email="{ \"value\" : \"${email}\", \"isPrimary\" : true, \"categories\" : [] }";else email="";fi
	if [[ ${accountnum} != "" ]]; then accountnum="{\"name\":\"${name}\",\"accountNo\":\"${accountnum}\",\"paymentMethod\":\"Other\",\"accountStatus\":\"Active\",\"libraryCode\":\"-\",\"libraryEdiCode\":\"-\"}"; fi

	if [[ ${fax} != "" ]]; then
		if [[ ${phone} != "" ]]; then
			fax=",{\"phoneNumber\":\"${fax}\",\"type\":\"Fax\"}"
		else
			fax="{\"phoneNumber\":\"${fax}\",\"type\":\"Fax\"}"
		fi
	fi

	if [[ ${orgtype} != "" ]]; then 
		orgtype=$(echo "${orgtype}" |xargs)
		if [[ ${orgtype_dict[${orgtype}]} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]]; then
			orgtype="\"${orgtype_dict[${orgtype}]}\""
		else
			orgtype=""
		fi
	fi
	url=${url/ .*/}
	url=${url/^[^h].*/}

	if [[ ${url} =~ ^http ]]; then url="{ \"language\" : \"en\", \"isPrimary\" : true, \"value\" : \"${url}\" }";fi

	if [[ ${addr1_line1} != "" ]]; then
		address="{\"isPrimary\":true,\"addressLine1\":\"${addr1_line1}\",\"addressLine2\":\"${addr1_line2}\",\"city\":\"${addr1_city}\",\"stateRegion\":\"${addr1_state}\",\"zipCode\":\"${addr1_zip}\", \"country\": \"${country}\", \"categories\" : [${categories}]}"
	fi

	if [[ ${addr2_line1} != "" ]]; then
		if [[ $address != "" ]];then
			address="${address}, {\"isPrimary\":false,\"addressLine1\":\"${addr2_line1}\",\"addressLine2\":\"${addr2_line2}\",\"city\":\"${addr2_city}\",\"stateRegion\":\"${addr2_state}\",\"zipCode\":\"${addr2_zip}\", \"country\": \"${country}\"}"
		else
			address="{\"isPrimary\":true,\"addressLine1\":\"${addr2_line1}\",\"addressLine2\":\"${addr2_line2}\",\"city\":\"${addr2_city}\",\"stateRegion\":\"${addr2_state}\",\"zipCode\":\"${addr2_zip}\", \"country\": \"${country}\"}"
		fi
	fi

IFS='' read -r -d '' org << EndOfOrg
{
 "id" : "${uuid}",
 "name" : "${name}",
 "code" : "${code}",
 "description" : "",
 "exportToAccounting" : false,
 "status" : "${status}",
 "aliases" : [${alias}],
 "addresses" : [${address}],
 "phoneNumbers" : [${phone} ${fax}],
 "emails" : [${email}],
 "urls" : [${url} ],
 "contacts" : [ ],
 "agreements" : [ ],
 "erpCode" : "",
 "organizationTypes" : [ ${orgtype} ],
 "vendorCurrencies" : [ ${currency} ],
 "edi" : {
   "vendorEdiType" : "31B/US-SAN",
   "libEdiType" : "31B/US-SAN",
   "ediFtp" : {
     "ftpFormat" : "SFTP",
     "ftpMode" : "ASCII",
     "ftpConnMode" : "Active"
   }
 },
 "interfaces" : [],
 "accounts" : [${accountnum}],
 "isVendor" : true,
 "changelogs" : [ ],
 "acqUnitIds" : [${acqunit}]
} 
EndOfOrg

	curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${org}" "${okapi_url}/organizations/organizations" |tr -d "\n" > tmp_output.${seq}
}
###############################
counter=0
SECONDS=1

while mapfile -t -n 10 records && ((${#records[@]})); do
	seq=0
	for record in "${records[@]}";do
		create_org_record "${seq}" "${record}" &

        	TIME=$SECONDS;msg="$SECONDS seconds"

        	if [[ $SECONDS -gt 60 ]];then TIME=$(($SECONDS/60));msg="$TIME minutes";fi
        	if [[ $SECONDS -gt 3600 ]];then TIME=$(($SECONDS/3600));msg="$TIME hours";fi

		seq=$(($seq + 1))
		counter=$((counter + 1))
		echo -en "Processing record $counter of $numrecs in $msg\r"
	done
	wait

	cat tmp_output.* >> ${outfile}
	rm tmp_output.*

done < ${infile}


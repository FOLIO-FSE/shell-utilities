auth 2>/dev/null || authn 2>/dev/null
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile=uuids
outfile="parsedrecords.json"
batchsize=1000
counter=0

search="$1"
rm -f $outfile


if [[ ${search} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ || ${search} =~ ^in[0-9]*$ ]];then
	echo "${search}" > uuids
fi

numrecs=$(wc -l ${infile} |cut -d " " -f1)

initialize_batch() {

IFS='' read -r -d '' batch << EndOfBatch
{
  "conditions": {
    "ids": [  ],
    "idType": ""
  },
  "recordType": "MARC_BIB"
}
EndOfBatch

}

while mapfile -t -n ${batchsize} ids && ((${#ids[@]})); do

        record_batch=""
	initialize_batch
	idType="instanceId"
	idstring=$(echo "${ids[@]}" |sed 's/[^a-f0-9in \-]//g;s/ /","/g')

	if [[ ${ids[0]} =~ ^in ]];then idType="instanceHrid";fi

	batch=$(echo "${batch}" |jq ".conditions.ids = [ \"${idstring}\" ] | .conditions.idType = \"${idType}\" ")

        counter=$(($counter + ${#ids[@]}))

        printf "Processing record %s of %s \r" $counter $numrecs

	apicall=$(curl -s -w '\n' -X POST -D -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${batch}" "${okapi_url}/source-storage/batch/parsed-records/fetch")
	echo "${apicall}" >> $outfile
done < ${infile}

        print "Processed %s records. Output has been sent to ${outfile} " $counter $numrecs


#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
SECONDS=1
TIMER=1
# Supply without a uuid to delete all of many record types
# 
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

deletetype=$1
uuid=$(echo "$2" |tr -dc [a-f0-9\-])

singlerecord=yes
deletefile="delete"
batchsize=10
outfile=delete_${deletetype}.log
errorfile=error_${deletetype}.log
rm -f ${outfile}
rm -f ${errorfile}

if [[ ${uuid} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then echo ${uuid} > delete;fi

if [[ ! -f ${deletefile} ]];then 
	echo "This utility expects a file containing UUIDs named \"delete\""
	exit
fi

sed -i 's/[^a-f0-9\-]//g' ${deletefile}

numrecs=$(wc -l ${deletefile} |cut -d " " -f1)
errors=0
SECONDS=1

delete_record() {

	local uuid=${1//[^0-9a-z\-]/}
	local seq=$2
	local apicall=$(curl -sI -w '%{http_code}' -X DELETE -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}/${uuid}")
	apicall=${apicall:(-3)}

	echo "${apicall} ${uuid}" >> "tmp_log.${seq}"
}

case $deletetype in
"accounts")
	recordtype="accounts";;
"actionprofiles")
	recordtype="data-import-profiles/actionProfiles";;
"authorities")
	singlerecord="yes"
	batchsize=10
	recordtype="authority-storage/authorities";;
"boundwiths")
        recordtype="inventory-storage/bound-with-parts";;
"calendars")
	recordtype="calendar/calendars";;
"campuses")
	recordtype="location-units/campuses";;
"composite-orders")
	recordtype="orders/composite-orders";;
"contacts")
	recordtype="organizations-storage/contacts";;
"coursedepartments")
	recordtype="coursereserves/departments";;
"courselistings")
	recordtype="coursereserves/courselistings";;
"courses")
	recordtype="coursereserves/courses";;
"coursereserves")
	recordtype="coursereserves/reserves";;
"coursetypes")
	recordtype="coursereserves/coursetypes";;
"departments")
	recordtype="departments";;
"feefineactions")
	recordtype="feefineactions";;
"fines")
	recordtype="feefineactions";;
"funds")
	recordtype="finance/funds";;
"groups")
	recordtype="groups";;
"holdings")
	recordtype="holdings-storage/holdings";;
"instances")
	recordtype="instance-storage/instances";;
"instance-relationships")
	recordtype="instance-storage/instance-relationships";;
"instance-types")
	recordtype="instance-types";;
"institutions")
	recordtype="location-units/institutions";;
"interfaces")
	recordtype="organizations-storage/interfaces";;
"invoices")
	recordtype="invoice/invoices";;
"invoice-lines")
	recordtype="invoice/invoice-lines";;
"items")
	recordtype="item-storage/items";;
"libraries")
	recordtype="location-units/libraries";;
"licenses")
	singlerecord="yes"
	batchsize=6
	recordtype="licenses/licenses";;
"loanhistory")
	recordtype="loan-storage/loan-history";;
"loans")
	recordtype="loan-storage/loans";;
"loantypes")
	recordtype="loan-types";;
"locations")
	recordtype="locations";;
"mattypes")
	recordtype="material-types";;
"notes")
	recordtype="notes";;
"notices")
	recordtype="scheduled-notice-storage/scheduled-notices";;
"orders")
	recordtype="orders-storage/purchase-orders";;
"organizations")
	recordtype="organizations/organizations";;
"permissionusers")
	singlerecord="yes"
   recordtype="perms/users";;
"polines")
	recordtype="orders-storage/po-lines";;
"precedingsucceeding")
	singlerecord="yes"
	recordtype="preceding-suceeding-titles";;
"requestprefs")
	recordtype="request-preference-storage/request-preference";;
"requests")
	recordtype="circulation/requests";;
"schedulednotices")
	singlerecord="yes"
	recordtype="scheduled-notice-storage/scheduled-notices";;
"servicepoints")
	recordtype="service-points";;
"srs")
	singlerecord="yes"
	recordtype="source-storage/records";;
"statcodes")
	recordtype="statcodes";;
"tags")
	recordtype="tags";;
"tasks")
	recordtype="tasks/tasks";;
"templates")
	recordtype="templates";;
"transactions")
	recordtype="finance/encumbrances";;
"usergroups")
	recordtype="groups";;
"users")
	recordtype="users";;
"users-safe")
	batchsize=5
	recordtype="bl-users/by-id";;
"users-bl")
	batchsize=5
	recordtype="bl-users/by-id";;
*)
	echo "Record type '${deletetype}' not found. Supported types are accounts, actionprofiles, boundwiths, campuses, contacts, coursedepartments, courselistings, coursetypes, departments, feefineactions, funds, groups, holdings, instances, instance-types, institutions, items, libraries, licenses, loan history, loans, loantypes, locations, mattypes, notes, notices, organizations, requests, schedulednotices, servicepoints, srs, tags, tasks, templates, transactions, usergroups, users, users-safe. Objects with attached records will need specialized delete routines"
	exit;;
esac

counter=0

uuid=${2//[^0-9a-f\-]}

if [[ ${uuid} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
	echo ${uuid} > ${deletefile}
fi

if [[ ${singlerecord} == "yes" ]];then
	while mapfile -t -n ${batchsize} uuids && ((${#uuids[@]})); do

	        if [[ $SECONDS -gt 500 ]]; then
	                auth 2>/dev/null || authn 2>/dev/null
	                okapi_token=$(cat okapi.token)
	                SECONDS=1
	                OFFSET=$(($OFFSET + 1))
	                TIMER=$(($OFFSET * 500 + $SECONDS))
	        else
	                if [[ $OFFSET -eq 0 ]];then TIMER=$SECONDS;fi
	        fi

		seq=0
		for uuid in ${uuids[@]};do
			delete_record ${uuid} ${seq} &
			seq=$(($seq + 1))
			counter=$(($counter + 1))
		done

		wait
		cat tmp_log.* >> ${outfile}
		rm tmp_log.*

        	msg="$TIMER seconds"

        	if [[ $TIMER -gt 60 ]];then TIME=$(($TIMER/60));msg="$TIME minutes";fi
        	if [[ $TIMER -gt 3600 ]];then TIME=$(($TIMER/3600));msg="$TIME hours";fi

        	echo -en "Processing record $counter of $numrecs in $msg in $(($counter/$TIMER)) recs/sec          \r"
	done < ${deletefile}
else
	while mapfile -t -n ${batchsize} uuids && ((${#uuids[@]})); do
		counter=$(($counter + ${#uuids[@]}))
		querydelim="%20or%20id=="
		idstring="${uuids[@]}"
		querystring="query=id==${idstring// /${querydelim}}"
		apicall=$(curl -s -w '\n' -X DELETE -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}?${querystring}")
		echo -e "${idstring}\t${apicall}" >> ${outfile}

       		msg="$TIMER seconds"

        	if [[ $TIMER -gt 60 ]];then TIME=$(($TIMER/60));msg="$TIME minutes";fi
        	if [[ $TIMER -gt 3600 ]];then TIME=$(($TIMER/3600));msg="$TIME hours";fi

        	echo -en "Processing record $counter of $numrecs in $msg in $(($counter/$TIMER)) recs/sec          \r"
	done < ${deletefile}

fi

echo "Done processing $counter $recordtype records. See $outfile for details."
num_errors=$(grep -v "^204" ${outfile} |grep " " |wc -l)

if [[ num_errors -ne 0 ]];then grep -v "^204" ${outfile} |grep " " > ${errorfile};echo "$num_errors errors were output to ${errorfile}";fi



# Supply without a uuid to delete all of many record types
# 
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

deletetype=$1
deletefile="delete"
batchsize=50
outfile=delete.log
rm -rf ${outfile}

numrecs=$(wc -l ${deletefile} |cut -d " " -f1)
errors=0

delete_record() {
	local uuid=${1//[^0-9a-z\-]/}
	local seq=$2
	local apicall=$(curl -sI -w '%{http_code}' -X DELETE -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}/${uuid}")
	apicall=${apicall:(-3)}

	echo "${apicall} ${uuid}" >> "tmp_log.${seq}"
}

case $deletetype in
"authorities")
	recordtype="authority-storage/authorities";;
"boundwiths")
        recordtype="inventory-storage/bound-with-parts";;
"campuses")
	recordtype="location-units/campuses";;
"composite-orders")
	recordtype="orders/composite-orders";;
"contacts")
	recordtype="organizations-storage/contacts";;
"courselistings")
	recordtype="coursereserves/courselistings";;
"courses")
	recordtype="coursereserves/courses";;
"coursetypes")
	recordtype="coursereserves/coursetypes";;
"departments")
	recordtype="departments";;
"feefineactions")
	recordtype="feefineactions";;
"groups")
	recordtype="groups";;
"holdings")
	recordtype="holdings-storage/holdings";;
"instances")
	recordtype="instance-storage/instances";;
"instance-relationships")
	recordtype="instance-storage/instance-relationships";;
"instance-types")
	recordtype="instance-types";;
"interfaces")
	recordtype="organizations-storage/interfaces";;
"invoices")
	recordtype="invoice/invoices";;
"invoice-lines")
	recordtype="invoice/invoice-lines";;
"items")
	recordtype="item-storage/items";;
"libraries")
	recordtype="location-units/libraries";;
"loanhistory")
	recordtype="loan-storage/loan-history";;
"loans")
	recordtype="loan-storage/loans";;
"loantypes")
	recordtype="loan-types";;
"locations")
	recordtype="locations";;
"mattypes")
	recordtype="material-types";;
"notes")
	recordtype="notes";;
"notices")
	recordtype="scheduled-notice-storage/scheduled-notices";;
"organizations")
	recordtype="organizations/organizations";;
"precedingsucceeding")
	recordtype="preceding-suceeding-titles";;
"requests")
	recordtype="circulation/requests";;
"servicepoints")
	recordtype="service-points";;
"srs")
	recordtype="source-storage/records";;
"statcodes")
	recordtype="statcodes";;
"tags")
	recordtype="tags";;
"templates")
	recordtype="templates";;
"transactions")
	recordtype="finance/encumbrances";;
"users")
	recordtype="users";;
*)
	echo "Record type '${deletetype}' not found. Supported types are boundwiths, campuses, contacts, coursetypes, departments, feefineactions, groups, holdings, instances, instance-types, items, libraries, loan history, loans, loantypes, locations, mattypes, notes, notices, organizations, requests, servicepoints, srs, tags, templates, transactions, users. Objects with attached records will need specialized delete routines"
	exit;;
esac

counter=0

uuid=${2//[^0-9a-f\-]}

if [[ ${uuid} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
	echo ${uuid} > ${deletefile}
fi

while mapfile -t -n ${batchsize} uuids && ((${#uuids[@]})); do
	querydelim="%20or%20id=="
	idstring="${uuids[@]}"
	querystring="query=id==${idstring// /${querydelim}}"
	curl -s -w '\n' -X DELETE -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}?${querystring}"
done < ${deletefile}

echo "Done processing $counter $recordtype records. See $outfile for details."
num_errors=$(grep -v "^204" ${outfile} |wc -l)

if [[ num_errors -ne 0 ]];then grep -v "^204" ${outfile} > error.log;echo "$num_errors errors were output to error.log";fi



# Updates records based on list of UUIDs 
# 
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

recordtype=$1
infile="${recordtype}.tsv"
outfile="${recordtype}_update_log.json"

rm -f ${outfile}


if [[ ! -f ${infile} ]]; then echo "This script cannot find input file ${infile}";exit;fi
if [[ $# -eq 0 ]]; then echo "You must enter a record type";exit;fi

numrecs=$(wc -l ${infile} |cut -d " " -f1)

case $recordtype in
"authorities")
        recordtype="authority-storage/authorities"
        ;;
"campuses")
	recordtype="location-units/campuses"
	;;
"groups")
	recordtype="groups"
	;;
"holdings")
	recordtype="holdings-storage/holdings"
	;;
"instances")
	recordtype="instance-storage/instances"
	;;
"instance-types")
	recordtype="instance-types"
	;;
"interfaces")
	recordtype="organizations-storage/interfaces"
	;;
"invoices")
	recordtype="invoice/invoices"
	;;
"invoice-lines")
	recordtype="invoice/invoice-lines"
	;;
"items")
	recordtype="item-storage/items"
	;;
"libraries")
	recordtype="location-units/libraries"
	;;
"licenses")
	recordtype="licenses/licenses"
	;;
"loans")
	recordtype="loan-storage/loans"
	;;
"locations")
	recordtype="locations"
	;;
"notes")
	recordtype="notes"
	;;
"notices")
	recordtype="scheduled-notice-storage/scheduled-notices"
	;;
"organizations")
	recordtype="organizations/organizations"
	;;
"polines")
	recordtype="orders-storage/po-lines"
	;;
"requests")
	recordtype="circulation/requests"
	;;
"servicepoints")
	recordtype="service-points"
	;;
"srs")
        recordtype="source-storage/records"
        ;;
"tags")
	recordtype="tags"
	;;
"users")
	recordtype="users"
	;;
*)
	echo "Record type '${recordtype}' not found. Supported types are campuses, groups, holdings, instances, instance-types, interfaces, items, libraries, licenses, loans, locations, notes, notices, organizations, polines, requests, servicepoints, srs, tags, users."
	exit
	;;
esac

counter=0
SECONDS=1

while IFS=$'\t' read -r uuid value;do 
	apicall=$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}/${uuid}" |jq -c .)
	
	updated_record=$(echo "${apicall}"  |jq --arg VALUE "${value}" '.customFields.department = [$VALUE]')

	apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_record}" "${okapi_url}/${recordtype}/${uuid}")

	echo "${apicall}" >> ${outfile}
	
        TIME=$SECONDS;msg="$SECONDS seconds"
        if [[ $SECONDS -gt 60 ]];then TIME=$(bc <<< "scale=1;$SECONDS/60");msg="$TIME minutes";fi
        if [[ $SECONDS -gt 3600 ]];then TIME=$(bc <<< "scale=1;$SECONDS/3600");msg="$TIME hours     ";fi

	counter=$(($counter + 1))

        echo -en "Processing record $counter of $numrecs in $msg\r"

done < ${infile}

echo "Finished processing $numrecs ${recordtype} records in $msg"


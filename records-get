auth 2>/dev/null || authn 2>/dev/null
SECONDS=1

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

rec_type=$1
search_for=$2
filename="${1}.json"
rm -f ${filename}

if [[ ${search_for} == "" ]]; then search_for="cql.allRecords=1";fi
query="query=${search_for}"

# endpoints with different behaviors use different defaults
num_retrieved=1000
sortby="%20sortby%20id"
idtype="id"
totalRecords="totalRecords"
accept="application/json"

offset=0
limitOrPerPage="limit"
PageOrOffset="offset"

function fetch_batch() {
	local offset=$1
	local t=$2

	curl -s -w '\n' -X GET -H "Accept: ${accept}" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?${limitOrPerPage}=${num_retrieved}&${PageOrOffset}=${!PageOrOffset}&${query}${sortby}" |eval "${jqexpr}"  > "tmp_${rec_type}.${t}"
}

case $rec_type in
"accounts")
	endpoint="accounts";;
"acqunits")
	rec_type="acquisitionsUnits"
	endpoint="acquisitions-units/units";;
"agreements")
	rec_type="results"
	endpoint="erm/sas"
	erm="yes";;
"agreements-picklists")
	endpoint="erm/refdata"
	erm="yes";;
"agreements-suppl")
	endpoint="erm/custprops"
	erm="yes";;
"authorities")
	endpoint="authority-storage/authorities";;
"authorities-source")
	rec_type="authoritySourceFiles"
	endpoint="authority-source-files";;
"authorities-srs")
	rec_type="records"
	query="recordType=MARC_AUTHORITY&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"batch-groups")
	endpoint="batch-groups"
	rec_type="batchGroups";;
"boundwiths")
	endpoint="inventory-storage/bound-with-parts"
	rec_type="boundWithParts";;
"budgets")
	endpoint="finance/budgets";;
"calendars")
	endpoint="calendar/calendars";;
"campuses")
	rec_type="loccamps"
	endpoint="location-units/campuses" ;;
"categories")
	endpoint="organizations-storage/categories";;
"circlog")
	endpoint="audit-data/circulation/logs"
	rec_type="logRecords" ;;
"circ-loans")
	endpoint="circulation/loans"
	rec_type="loans";;
"composite-orders")
	rec_type="purchaseOrders"
	endpoint="orders/composite-orders" ;;
"contacts")
	endpoint="organizations-storage/contacts" ;;
"coursedepartments")
	rec_type="departments"
	endpoint="coursereserves/departments";;
"courselistings")
	rec_type="courseListings"
	endpoint="coursereserves/courselistings";;
"courses")
	endpoint="coursereserves/courses";;
"coursereserves")
	rec_type="reserves"
	endpoint="coursereserves/reserves";;
"courseterms")
	rec_type="terms"
	endpoint="coursereserves/terms";;
"coursetypes")
	rec_type="courseTypes"
	endpoint="coursereserves/coursetypes";;
"departments")
	endpoint="departments";;
"eholdings")
	rec_type="data"
	num_retrieved=100
	limitOrPerPage="count"
	PageOrOffset="page"
	query="q=%2A&filter\[selected\]=true"
	accept="application/vnd.api+json"
	sortby=""
	totalRecords="meta.totalResults"
	endpoint="eholdings/packages";;
"entitlements")
	endpoint="erm/entitlements";;
"expense-classes")
	endpoint="finance/expense-classes"
	rec_type="expenseClasses";;
"feefines")
	endpoint="feefines";;
"feefineactions")
	endpoint="feefineactions";;
"fieldprotection")
	rec_type="marcFieldProtectionSettings"
	endpoint="field-protection-settings/marc";;
"fines")
	rec_type="feefineactions"
	endpoint="feefineactions";;
"fiscalyears")
	rec_type="fiscalYears"
	endpoint="finance/fiscal-years";;
"fund-expense")
	rec_type="fundCodeVsExpClassesTypes"
	endpoint="finance/fund-codes-expense-classes";;
"fund-groups")
	rec_type="groups"
	endpoint="finance/groups";;
"funds")
	endpoint="finance/funds";;
"holdings")
	rec_type="holdingsRecords"
	endpoint="holdings-storage/holdings";;
"holdings-srs")
	rec_type="records"
	query="recordType=MARC_HOLDING&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"identifiertypes")
	rec_type="identifierTypes"
	endpoint="identifier-types"
	;;
"importjobs")
	rec_type="jobExecutions"
	endpoint="metadata-provider/jobExecutions"
	num_retrieved=1
	;;
"inhouse") 
	rec_type="checkIns"
	endpoint="check-in-storage/check-ins"
	query="query=(itemStatusPriorToCheckIn==Available)";;
"interfaces")
	endpoint="organizations-storage/interfaces";;
"instance-relationships")
	rec_type="instanceRelationships"
	endpoint="instance-storage/instance-relationships";;
"instanceformats")
	rec_type="instanceFormats"
	endpoint="instance-formats";;
"instancerelationshiptypes")
	rec_type="instanceRelationshipTypes"
	endpoint="instance-relationship-types";;
"instances")
	endpoint="instance-storage/instances";;
"institutions")
	rec_type="locinsts"
	endpoint="location-units/institutions";;
"inventory-items")
	rec_type="items"
	num_retrieved=100
	endpoint="inventory/items";;
"inventory")
	rec_type="instances"
	id_type=".instanceId"
	num_retrieved=200
	accept="text/plain"
	endpoint="inventory-view/instances";;
"items")
	endpoint="item-storage/items";;
"invoices")
	endpoint="invoice/invoices";;
"invoice-lines")
	rec_type="invoiceLines"
	endpoint="invoice/invoice-lines";;
"exportjobs")
	rec_type="jobExecutions"
	endpoint="data-export/job-executions";;
"ledgers")
	endpoint="finance/ledgers";;
"libraries")
	rec_type="loclibs"
	endpoint="location-units/libraries";;
"licenses")
	endpoint="licenses/licenses"
	query="sort=name%3Bdesc"
	erm="yes";;
"licenses-picklists")
	endpoint="licenses/refdata"
	erm="yes";;
"licenses-terms")
	endpoint="licenses/custprops"
	erm="yes";;
"locations")
	endpoint="locations";;
"loantypes")
	endpoint="loan-types";;
"loan-history")
	endpoint="loan-storage/loan-history"
	rec_type="loansHistory";;
"loans")
	endpoint="loan-storage/loans";;
"mattypes")
	rec_type="mtypes"
	endpoint="material-types";;
"manualblocks")
	endpoint="manualblocks";;
"mtypes")
	endpoint="material-types";;
"notes")
	endpoint="notes";;
"notices")
	rec_type="scheduledNotices"
	endpoint="scheduled-notice-storage/scheduled-notices";;
"orderprefixes")
	rec_type="prefixes"
	endpoint="orders/configuration/prefixes";;
"orderlines")
	endpoint="orders/order-lines" 
	rec_type="poLines";;
"orders")
	endpoint="orders-storage/purchase-orders" 
	rec_type="purchaseOrders";;
"organizations")
	endpoint="organizations-storage/organizations"
	query="query=%28status%3D%3D%22Active%22%29"
	;;
"packages")
	rec_type="data"
	num_retrieved=100
	limitOrPerPage="count"
	PageOrOffset="page"
	query="q=%2A&filter\[selected\]=true"
	accept="application/vnd.api+json"
	sortby=""
	totalRecords="meta.totalResults"
	endpoint="eholdings/packages";;
"permissions")
	sortby=""
	num_retrieved=20000
	endpoint="perms/permissions";;
"permissionusers")
	rec_type="permissionUsers"
	endpoint="perms/users";;
"polines")
	rec_type="poLines"
	endpoint="orders-storage/po-lines";;
"preceedingsucceeding")
	rec_type="precedingSucceedingTitles"
	endpoint="preceding-succeeding-titles";;
"requestprefs")
	rec_type="requestPreferences"
	endpoint="request-preference-storage/request-preference";;
"requests")
	endpoint="circulation/requests";;
"schedulednotices")
	rec_type="scheduledNotices"
	endpoint="scheduled-notice-storage/scheduled-notices";;
"servicepoints")
	endpoint="service-points";;
"servicepointsusers")
	rec_type="servicePointsUsers"
	endpoint="service-points-users";;
"srs")
	rec_type="records"
	query="recordType=MARC_BIB&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"statcodes")
	rec_type="statisticalCodes"
	endpoint="statistical-codes";;
"tags")
	endpoint="tags"
	no_total="yes";;
"templates")
	num_retrieved="1000"
	endpoint="templates";;
"transactions")
	endpoint="finance/transactions";;
"usergroups")
	endpoint="groups";;
"users")
	endpoint="users";;
"vouchers")
	endpoint="voucher/vouchers";;
*)
	echo "Record type '${recordtype}' not found. Supported types are accounts, acqunits, agreements, agreements-picklists, agreements-suppl, authorities, authorities-srs, batch-groups, boundwiths, budgets, campuses, categories, circ-loans, circlog, composite-orders, contacts, coursedepartments, courselistings, courses, coursetypes, departments, eholdings, entitlements expense-classes, feefines, feefineactions, fiscalyears, fund-expense, fund-groups, funds, holdings, holdings-srs, identifiertypes, importjobs, inhouse,  interfaces, instance-relationships, instancerelationshiptypes, instances, institutions, items, inventory, inventory-items, invoices, invoice-lines, exportjobs, ledgers, libraries, licenses, licenses-picklists, licenses-terms, locations, loantypes, loan-history, loans, manualblocks, mattypes, mtypes, notes, notices, orderprefixes, orderlines, orders, organizations, permissions, permissionusers, polines, preceedingsucceeding, requestprefs, requests, schedulednotices, servicepoints, servicepointsusers, srs, statcodes, tags, templates, transactions, usergroups, users, vouchers.";exit;;
esac

rm -f ${rec_type}

if [[ $erm == "yes" ]];then
	num_retrieved="1"
	query="stats=true"
	limitOrPerPage="perPage"
	jqexpr="jq -c '.[] | del(.metadata)'"
fi

if [[ -z $jqexpr ]];then jqexpr="jq -c \".${rec_type}[] | del(.metadata)\"";fi

num_records=$(curl -s -w '\n' -X GET -H "Accept: ${accept}" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?${query}&${limitOrPerPage}=${num_retrieved}" |jq -r .${totalRecords})

for (( offset=0; offset<=$num_records; ));do
	if [[ $SECONDS -gt 500 ]]; then
		auth 2>/dev/null || authn 2>/dev/null
		okapi_token=$(cat okapi.token)
		SECONDS=1
	fi

	for ((t=0; t<=4; t=$(($t + 1)) )); do
		if [[ $offset -le $num_records ]];then 
			fetch_batch $offset $t &
			offset=$(($offset + $num_retrieved))
		fi
	done
	wait
		
	cat tmp_${rec_type}.* >> ${filename}
	rm tmp_${rec_type}.*

	if [[ $offset -ne 0 ]];then printf "%s records retrieved of %s          \r" $offset $num_records;fi
done

echo "$num_records records have been exported to \"${filename}\""


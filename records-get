tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

rec_type=$1
search_for=$2
filename="${1}.json"
rm -f ${filename}

if [[ ${search_for} == "" ]]; then search_for="cql.allRecords=1";fi
query="query=${search_for}"

# endpoints with different behaviors use different defaults
num_retrieved=1000
recsretrieved=100
sortby="%20sortby%20id"

limit=0
offset=0
no_total="no"

function fetch_batch() {
	local offset=$1
	local jqexpr="jq -c '.${rec_type}[] | del(.metadata)'"

	curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?limit=${num_retrieved}&offset=${offset}&${query}${sortby}" |eval "${jqexpr}"  > "tmp_${rec_type}.${t}"
}

case $rec_type in
"accounts")
	endpoint="accounts";;
"agreements")
	endpoint="erm/sas"
	no_total="yes";;
"authorities")
	endpoint="authority-storage/authorities";;
"authorities-srs")
	rec_type="records"
	query="recordType=MARC_AUTHORITY&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"boundwiths")
	endpoint="inventory-storage/bound-with-parts"
	rec_type="boundWithParts";;
"budgets")
	endpoint="finance/budgets";;
"categories")
	endpoint="organizations-storage/categories";;
"circlog")
	endpoint="audit-data/circulation/logs"
	rec_type="logRecords" ;;
"contacts")
	endpoint="organizations-storage/contacts" ;;
"courselistings")
	rec_type="courseListings"
	endpoint="coursereserves/courselistings";;
"courses")
	endpoint="coursereserves/courses";;
"departments")
	endpoint="departments";;
"expense-classes")
	endpoint="finance/expense-classes"
	rec_type="expenseClasses";;
"feefines")
	endpoint="feefines";;
"feefineactions")
	endpoint="feefineactions";;
"fiscalyears")
	rec_type="fiscalYears"
	endpoint="finance/fiscal-years";;
"fund-expense")
	rec_type="fundCodeVsExpClassesTypes"
	endpoint="finance/fund-codes-expense-classes";;
"funds")
	endpoint="finance/funds";;
"holdings")
	rec_type="holdingsRecords"
	endpoint="holdings-storage/holdings";;
"holdings-srs")
	rec_type="records"
	query="recordType=MARC_HOLDING&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"importjobs")
	rec_type="jobExecutions"
	endpoint="metadata-provider/jobExecutions"
	limit=1
	;;
"inhouse") 
	rec_type="checkIns"
	endpoint="check-in-storage/check-ins"
	query="query=(itemStatusPriorToCheckIn==Available)";;
"interfaces")
	endpoint="organizations-storage/interfaces";;
"instance-relationships")
	rec_type="instanceRelationships"
	endpoint="instance-storage/instance-relationships";;
"instancerelationshiptypes")
	rec_type="instanceRelationshipTypes"
	endpoint="instance-relationship-types";;
"instances")
	endpoint="instance-storage/instances";;
"items")
	endpoint="item-storage/items";;
"invoices")
	endpoint="invoice/invoices";;
"invoice-lines")
	rec_type="invoiceLines"
	endpoint="invoice/invoice-lines";;
"exportjobs")
	rec_type="jobExecutions"
	endpoint="data-export/job-executions";;
"licenses")
	endpoint="licenses/licenses"
	query="sort=name%3Bdesc"
	no_total="yes";;
"locations")
	endpoint="locations";;
"loantypes")
	endpoint="loan-types";;
"loan-history")
	endpoint="loan-storage/loan-history"
	rec_type="loansHistory";;
"loans")
	endpoint="loan-storage/loans";;
"mattypes")
	rec_type="mtypes"
	endpoint="material-types";;
"mtypes")
	endpoint="material-types";;
"notes")
	limit=1
	endpoint="notes";;
"orderprefixes")
	rec_type="prefixes"
	endpoint="orders/configuration/prefixes";;
"orderlines")
	endpoint="orders/order-lines" 
	rec_type="poLines";;
"orders")
	endpoint="orders-storage/purchase-orders" 
	rec_type="purchaseOrders";;
"organizations")
	endpoint="organizations-storage/organizations"
	query="query=%28status%3D%3D%22Active%22%29"
	;;
"polines")
	rec_type="poLines"
	endpoint="orders-storage/po-lines";;
"preceedingsucceeding")
	rec_type="precedingSucceedingTitles"
	endpoint="preceding-succeeding-titles";;
"requestprefs")
	rec_type="requestPreferences"
	endpoint="request-preference-storage/request-preference";;
"requests")
	endpoint="circulation/requests";;
"schedulednotices")
	rec_type="scheduledNotices"
	endpoint="scheduled-notice-storage/scheduled-notices";;
"servicepoints")
	endpoint="service-points";;
"srs")
	rec_type="records"
	query="recordType=MARC_BIB&state=ACTUAL&sortby=id"
	sortby=""
	endpoint="source-storage/records";;
"statcodes")
	rec_type="statisticalCodes"
	endpoint="statistical-codes";;
"tags")
	endpoint="tags"
	no_total="yes";;
"transactions")
	endpoint="finance/transactions";;
"usergroups")
	endpoint="groups";;
"users")
	endpoint="users";;
"vouchers")
	endpoint="voucher/vouchers";;
*)
	echo "Record type not found.";exit;;
esac

rm -f ${rec_type}


if [[ ${no_total} == "no" ]];then
	num_records=$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?${query}&limit=${limit}" |jq -r .totalRecords)

	for (( offset=0; offset<=$num_records; ));do
		for ((t=0; t<=4; t=$(($t + 1)) )); do
			if [[ $offset -le $num_records ]];then 
				fetch_batch $offset &
				offset=$(($offset + $num_retrieved))
			fi
		done
		wait
			
		cat tmp_${rec_type}.* >> ${filename}
		rm tmp_${rec_type}.*
	
		if [[ $offset -ne 0 ]];then printf "%s records retrieved of %s\r" $offset $num_records;fi
	done
else
	# Licenses and agreements need separate handling plus iterative processing because number of records is unknown 
	while [[ $recsretrieved -eq 100 ]] ;do
	        apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?${query}&perPage=100&offset=$offset")
	
	        recsretrieved=$(echo ${apicall} |jq '. |length')
	        num_records=$(($offset + $recsretrieved))
	        printf "%s records retrieved\r" $num_records
	
	        $(echo ${apicall} |jq '.[] | del(.metadata)' >> ${filename})
	        offset=$(($offset + 100))
	        done
	
	echo "$num_records records retrieved"
fi

echo "$num_records records have been exported to \"${filename}\""




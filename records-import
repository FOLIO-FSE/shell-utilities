auth 2>/dev/null || authn 2>/dev/null
SECONDS=0
TIMER=0
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

workingdir=$(pwd)
profileName="Default - Create SRS MARC Authority"
#profileName="Default - Create instance and SRS MARC Bib"

logfile="${workingdir}/dataimport_errors.json"
summaryfile="$(pwd)/summaryfile.log"
batchdir="batch_upload"

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

errors=0
created=0
updated=0
status=""

rm -f ${logfile}

if ! [ -d "${batchdir}" ]; then
	echo "This script expects to process a list of files in a directory named 'batch_upload'"
	exit
fi


get_summary() {
	jobExecutionId=$(cat "${workingdir}/.jobid")

	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/metadata-provider/jobSummary/${jobExecutionId}") 
	batcherrors=$(echo "${apicall}" |jq -r .sourceRecordSummary.totalErrors)
	batchcreated=$(echo "${apicall}" |jq -r .sourceRecordSummary.totalCreatedEntries)
	batchupdated=$(echo "${apicall}" |jq -r .sourceRecordSummary.totalUpdatedEntries)

	created=$(($created + $batchcreated))
	updated=$(($updated + $batchupdated))
	errors=$(($errors + $batcherrors))

	summarymessage="Created: $created	Updated: $updated	Errors: $errors	JobId: $jobExecutionId"
	echo "${apicall}" >> ${summaryfile}


	curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/metadata-provider/jobLogEntries/${jobExecutionId}?entity=SRS_MARC&errorsOnly=true&limit=10000&order=asc" |jq -r '.entries[]' >> ${logfile}

}
check_upload() {
	jobExecutionId=$(cat "${workingdir}/.jobid")
	status=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/metadata-provider/jobExecutions?statusNot=DISCARDED&uiStatusAny=PREPARING_FOR_PREVIEW&uiStatusAny=READY_FOR_PREVIEW&uiStatusAny=RUNNING" |jq -r ".jobExecutions[] | select(.id = \"${jobExecutionId}\") |select(.status != null) | .status")
	
}

upload_file() {
	marcfile="$1"
	cd ${batchdir}

	apicall=$(curl --http1.1 -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/data-import-profiles/jobProfiles?limit=1000")
	jobProfileId=$(echo "${apicall}" |jq -r ".jobProfiles[] | select(.name==\"${profileName}\") | .id")


	if ! [[ $jobProfileId =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
		echo "No valid profile found. Exiting."
		exit
	fi
	
	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "{\"fileDefinitions\":[{ \"name\":\"${marcfile}\"}]}" "${okapi_url}/data-import/uploadDefinitions")
	
	fileId=$(echo ${apicall} | jq -r '.fileDefinitions[0].id')
	jobExecutionId=$(echo ${apicall} | jq -r '.fileDefinitions[0].jobExecutionId')
	uploadDefinitionId=$(echo ${apicall} | jq -r '.fileDefinitions[0].uploadDefinitionId')

	echo "${jobExecutionId}" > ${workingdir}/.jobid

	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/octet-stream" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "@${marcfile}" "${okapi_url}/data-import/uploadDefinitions/${uploadDefinitionId}/files/${fileId}")
	
	payload="{\"uploadDefinition\":${apicall},\"jobProfileInfo\": {\"id\": \"${jobProfileId}\", \"dataType\": \"MARC\"}}"
	
	apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${payload}" "${okapi_url}/data-import/uploadDefinitions/${uploadDefinitionId}/processFiles?defaultMapping=true")
	
	echo "${apicall}"
}

process_file() {
	marcfile="${1}"
	upload_file "${marcfile}"
	status="beginning"

	while [[ ${status} != "" ]];do
		sleep 5
		check_upload
	done
	
	get_summary
	echo "Errors have been output to ${logfile}"
}

counter=1
numfiles=$(ls ${batchdir} |wc -l)

for marcfile in $(ls ${batchdir}); do
        if [[ $SECONDS -gt 500 ]]; then
		TIMER=$(($TIMER + $SECONDS))
                auth 2>/dev/null || authn 2>/dev/null
                SECONDS=0
        fi
	TIME=$SECONDS;msg="$SECONDS seconds"

	if [[ $TIMER -gt 60 ]];then TIME=$(($TIMER/60));msg="$TIME minutes";fi
	if [[ $TIMER -gt 3600 ]];then TIME=$(($TIMER/3600));msg="$TIME hours";fi
	echo -en "Processing ${marcfile} -- $counter of $numfiles in $msg\r"

	output=$(process_file "${marcfile}")
	counter=$(($counter + 1))
done


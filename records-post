tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

infile="${1}.json"
recordtype=$1
operation=$2

outfile="${recordtype}_posting.log"
rm -f "${outfile}"

echo "This script expects input file \"${infile}\" to exist and requires two positional arguments:"
echo "1: recordtype"
echo "2: operation (POST or PUT)"

if [[ ! -f ${infile} ]]; then echo "This script cannot find input file ${infile}";exit;fi
if [[ $# -eq 0 ]]; then echo "You must enter a record type";exit;fi

if [[ $operation != "POST" && $operation != "PUT" ]]; then echo "Operation must be POST or PUT";exit;fi

numrecs=$(wc -l ${infile} |cut -d " " -f1)

postrecord() {
	local record="${1}"
	local seq="${2}"
	local apicall

	if [[ ${operation} == "POST" ]];then
		apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/${recordtype}")
	else
		id=$(echo "${record}" |jq -r .id)

		apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/${recordtype}/${id}")
	fi
	
	echo "${apicall}" | tr -d '\n' |sed 's/$/\n/' > "tmp_records.${seq}"

}


case $recordtype in
"agreements")
	recordtype="erm/sas";;
"agreements-picklists")
	recordtype="erm/refdata";;
"authorities")
	recordtype="authority-storage/authorities";;
"authorities-source")
	recordtype="authority-source-files";;
"campuses")
	recordtype="location-units/campuses";;
"composite-orders")
	recordtype="orders/composite-orders";;
"groups")
	recordtype="groups";;
"feefineactions")
        recordtype="feefineactions"
        ;;
"fines")
        recordtype="feefineactions";;
"holdings")
	recordtype="holdings-storage/holdings";;
"identifiertypes")
	recordtype="identifier-types";;
"instances")
	recordtype="instance-storage/instances";;
"instance-formats")
	recordtype="instance-formats";;
"instance-note-types")
	recordtype="instance-note-types";;
"instance-types")
	recordtype="instance-types";;
"interfaces")
	recordtype="organizations-storage/interfaces";;
"invoices")
	recordtype="invoice/invoices";;
"invoice-lines")
	recordtype="invoice/invoice-lines";;
"items")
	recordtype="item-storage/items";;
"libraries")
	recordtype="location-units/libraries";;
"licenses")
	recordtype="licenses/licenses";;
"licenses-picklists")
	recordtype="licenses/refdata";;
"loans")
	recordtype="loan-storage/loans";;
"loantypes")
	recordtype="loan-types";;
"locations")
	recordtype="locations";;
"mattypes")
	recordtype="material-types";;
"nature-of-content")
	recordtype="nature-of-content-terms";;
"notices")
	recordtype="scheduled-notice-storage/scheduled-notices";;
"orderlines")
	recordtype="orders/order-lines";;
"organizations")
	recordtype="organizations/organizations";;
"parsedrecords")
	recordtype="change-manager/parsedRecords";;
"permissions")
	recordtype="perms/permissions";;
"polines")
	recordtype="orders-storage/po-lines";;
"requests")
	recordtype="circulation/requests";;
"servicepoints")
	recordtype="service-points";;
"srs")
        recordtype="source-storage/records"
        ;;
"tags")
	recordtype="tags";;
"templates")
	recordtype="templates";;
"users")
	recordtype="users";;
*)
	echo "Record type '${recordtype}' not found. Supported types are agreements, agreements-picklists, authorities, authorities-source, campuses, composite-orders, groups, feefineactions, holdings, identifiertypes, instances, instance-formats, instance-note-types, instance-types, interfaces, invoices, invoice-lines, items, libraries, licenses, licenses-picklists, loans, locations, mattypes, nature-of-content, notices, orderlines, organizations, parsedrecords, permissions, polines, requests, servicepoints, srs, tags, templates, users."
	exit;;
esac

counter=0
seconds=1

while mapfile -t -n 6 lines && ((${#lines[@]})); do
	seq=0

	for line in "${lines[@]}";do

		postrecord "${line}" "${seq}" & 

		counter=$(($counter + 1))
		seq=$(($seq + 1))
	done
	wait

        TIME=$SECONDS;msg="$SECONDS seconds"
        if [[ $SECONDS -gt 60 ]];then TIME=$(bc <<< "scale=1;$SECONDS/60");msg="$TIME minutes";fi
        if [[ $SECONDS -gt 3600 ]];then TIME=$(bc <<< "scale=1;$SECONDS/3600");msg="$TIME hours     ";fi

	echo -en "Processing record $counter of $numrecs in $msg\r"

	cat tmp_records.* >> ${outfile}
	rm tmp_records.*

done < ${infile}

echo "Finished processing $numrecs ${recordtype} records."
echo "API output has been sent to ${outfile}"


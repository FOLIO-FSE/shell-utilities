#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
SECONDS=1
OFFSET=0
# Updates records based on list of UUIDs 
# 
tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

# batchsize is ignored for users and set to 1 to prevent failure
batchsize=6

recordtype=$1
infile="${recordtype}.tsv"
dos2unix "${infile}"
outfile="${recordtype}_update_log.json"

rm -f ${outfile}

#pattern='"source":{}'
#replace='"source":{"id":"9bed0d46-35d1-45f6-801c-dc54d911fe12","personal":{"lastName":"Data","firstName":"Migration"}}'

# unrem pattern/replace expression in code below if doing a string replace
#
# unrem jq expression in code below if using a jq manipulation 

if [[ ! -f ${infile} ]]; then echo "This script cannot find input file ${infile}";exit;fi
if [[ $# -eq 0 ]]; then echo "You must enter a record type";exit;fi

numrecs=$(wc -l ${infile} |cut -d " " -f1)

fixrecord() {
	local uuid=${1}
	local seq=${2}
	local value="${3}"
	local updated_record
	local apicall
	if [[ ${recordtype} == "source-storage/records" ]];then 
		apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/source-storage/records/${uuid}/formatted?idType=INSTANCE" |jq .)
		uuid=$(echo ${apicall} |jq -r .id)
	else
		apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}/${uuid}" |jq .)
	fi

# Unrem the appropriate updated_record expression for your task
#	updated_record=$(echo "${apicall}"  |jq '.customFields.academicStatus = ["opt_3"]')
 
	updated_record=$(echo "${apicall}"  |jq -r --arg VALUE "${value}" '
#		(if .volume != null then .volume = (.volume |sub(" *Acc.*"; "")) else . end)
#		 ((.parsedRecord.content.fields[] | select(."008" != null) |."008") = "780615s19uu    xx a                eng d")               
#		 ((.parsedRecord.content.fields[] | select(."008" != null) |."008") = $VALUE)               
                 (.name as $name | .accounts += [{"name": $name,"accountNo": $VALUE,"paymentMethod":"Other","accountStatus":"Active","libraryCode":"-","libraryEdiCode":"-"}] ) 
#                (.active = true ) 
#                (.administrativeNotes += [$VALUE] ) 
#                (.agreementContentTypes = [{"_delete": true, "contentType": {"value": $VALUE}}] ) 
#                (.customFields.academicStatus = $VALUE) # single dropdown or text
#                (.erpCode = $VALUE ) 
#                (.fundDistributions[0].code = "ybpbl" ) 
#		(.fund.ledgerId = "bdc5218a-e14c-41ea-8a9f-d7c9980d8b35")
#                 (.groupIds += [$VALUE] ) 
#                (.materialTypeId = "c6f1d4a7-9b07-4409-a7ab-81aaf6e1fce4") 
#                (.notes |= .+ [{"holdingsNoteTypeId": "b160f13a-ddba-4053-b9c4-60ec5ea45d56", "staffOnly": false, "note": $VALUE}]) 
#                (.permanentLoanTypeId = $VALUE)
#                (.permanentLocationId = $VALUE) 
#                (.statisticalCodeIds += ["85c69c58-8ab7-47ea-89ea-585dae6ef0d0"] ) 
#		 (.electronicAccess = ($VALUE|fromjson))                
#                (.statusId = $VALUE)
#                (.temporaryLoanType = {"id": $VALUE} ) # UUID, must use items-inventory
#                (.temporaryLocation = {"id": $VALUE} ) # UUID, must use items-inventory

		|del(.metadata)
')
	#updated_record=${apicall//$pattern/$replace}
	apicall=$(curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "Accept: text/plain" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${updated_record}" "${okapi_url}/${recordtype}/${uuid}")

	echo "${apicall}" |grep -i [a-z] >> "tmp_records.${fileno}"

}


case $recordtype in
"agreements")
        recordtype="erm/sas";;
"authorities")
        recordtype="authority-storage/authorities";;
"authorities-source")
	recordtype="authority-source-files";;
"campuses")
	recordtype="location-units/campuses";;
"categories")
	recordtype="organizations-storage/categories";;
"entitlements")
	recordtype="erm/entitlements";;
"funds")
	recordtype="finance/funds";;
"groups")
	recordtype="groups";;
"holdings")
	recordtype="holdings-storage/holdings";;
"instances")
	recordtype="instance-storage/instances";;
"instance-types")
	recordtype="instance-types";;
"interfaces")
	recordtype="organizations-storage/interfaces";;
"invoices")
	recordtype="invoice/invoices";;
"invoice-lines")
	recordtype="invoice/invoice-lines";;
"items")
	recordtype="item-storage/items";;
"items-inventory")
	recordtype="inventory/items";;
"libraries")
	recordtype="location-units/libraries";;
"licenses")
	recordtype="licenses/licenses";;
"licenses-terms")
	recordtype="licenses/custprops";;
"loans")
	recordtype="loan-storage/loans";;
"locations")
	recordtype="locations";;
"manualblocks")
	recordtype="manualblocks";;
"notes")
	recordtype="notes";;
"notices")
	recordtype="scheduled-notice-storage/scheduled-notices";;
"orders")
	recordtype="orders-storage/purchase-orders";;
"organizations")
	recordtype="organizations/organizations";;
"parsedrecords")
	recordtype="change-manager/parsedRecords";;
"polines")
	recordtype="orders-storage/po-lines";;
"requests")
	recordtype="circulation/requests";;
"servicepoints")
	recordtype="service-points";;
"srs")
        recordtype="source-storage/records";;
"tags")
	recordtype="tags";;
"templates")
	recordtype="templates";;
"users")
	recordtype="users";;
*)
	echo "Record type '${recordtype}' not found. Supported types are agreements, authorities, campuses, entitlements, groups, holdings, instances, instance-types, interfaces, invoices, invoice-lines, items, items-inventory, libraries, licenses, licenses-terms,loans, locations, manualblocks, notes, notices, organizations, parsedrecords, polines, requests, servicepoints, srs, tags, templates, users."
	exit;;
esac

counter=0
SECONDS=1

while mapfile -t -n ${batchsize} lines && ((${#lines[@]})); do

        if [[ $SECONDS -gt 500 ]]; then
                auth 2>/dev/null || authn 2>/dev/null
		okapi_token=$(cat okapi.token)
                SECONDS=1
		OFFSET=$(($OFFSET + 1))
        fi

	TIMER=$(($OFFSET * 500 + $SECONDS))

	seq=0
	for line in "${lines[@]}";do
		IFS=$'\t' read -r uuid value <<< "${line}"
		
		fixrecord "${uuid}" "${seq}" "${value}" &

		counter=$(($counter + 1))
		seq=$(($seq + 1))
	done
	wait
	
        TIME=$TIMER;msg="$SECONDS seconds"
        if [[ $TIMER -gt 60 ]];then TIME=$(bc <<< "scale=1;$TIMER/60");msg="$TIME minutes";fi
        if [[ $TIMER -gt 3600 ]];then TIME=$(bc <<< "scale=1;$TIMER/3600");msg="$TIME hours     ";fi

        echo -en "Processing record $counter of $numrecs in $msg\r"

	cat tmp_records.* >> ${outfile}
	rm tmp_records.*

done < ${infile}

echo "Finished processing $numrecs ${recordtype} records in $msg"
echo "Output was sent to ${outfile}"


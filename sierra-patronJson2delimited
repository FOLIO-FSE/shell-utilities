outfile="patrons.tsv"

rm -f ${outfile} || true

declare -A addtype
addtype=( ["a"]="Primary address" ["h"]="Secondary address")
addtypedefault="a"
addtypedefault2="h"
ptypedefault="13"

emaildomain="washcoll.edu"
emaildefault="mlcirc@washcoll.edu"

emaildefaultforall="1"
convertemail2networkID="0"

declare -a groups
declare -a departments 

#groups=( ["0"]="Student" ["2"]="Staff" ["3"]="Community" ["4"]="High School" ["5"]="Graduate" ["12"]="Friends" ["10"]="ILL Lending" ["11"]="Campus Spouse/Dependent" )

departments=( ["r"]="Philosophy" ["b"]="Anthropology" ["t"]="Physics" ["q"]="Music" ["z"]="Other" ["p"]="Mathematics" ["v"]="Psychology" ["o"]="Internat St" ["k"]="French" ["l"]="German" ["d"]="Biology" ["f"]="Chemistry" ["e"]="Business Mgmt" ["j"]="English" ["s"]="Physical Educ" ["h"]="Economics" ["w"]="Sociology" ["y"]="Interdiscip" ["i"]="Education" ["a"]="American St" ["m"]="History" ["g"]="Drama" ["u"]="Political Sci" ["x"]="Spanish" ["n"]="Humanities" ["0"]="Undeclared" ["c"]="Art" )

cat patrons/patrons.*.json | tr -d "|" | jq -c '.entries[]' > all_patrons.json

cat all_patrons.json |jq --arg addtypedefault "$addtypedefault" --arg addtypedefault2 "$addtypedefault2" --arg emaildefault "$emaildefault" --arg ptypedefault "$ptypedefault" '. | [
        "\(.id)" // "",
        (select(.barcode| test("[0-9]")) | "\(.barcode)") // "\(.id)",
	(.varFields[] |select(.fieldTag=="z") | "\(.content)") // "\(.id)", # network
	(.varFields[] |select(.fieldTag=="u") | "\(.content)") // "\(.id)", # univ id
	"\(.fixedFields."46".value)" // "0", # department
	"\(.createdDate)" // "",  # creation date
	"\(.expirationDate)" // "",  # expiration date
        .emails[0] // "",
        .addresses[0].type // $addtypedefault,
        .addresses[0].lines[0] // "",
        .addresses[0].lines[1] // "",
        .addresses[0].lines[2] // "",
        .addresses[1].type // $addtypedefault2,
        .addresses[1].lines[0] // "",
        .addresses[1].lines[1] // "",
        .addresses[1].lines[2] // "",
        .names[0] // "",
         (.varFields[] |select(.fieldTag=="t") | "\(.content)") // "",
        "\(.phones[1].number)" // "",
	"\(.patronType)" // $ptypedefault,
	"\(.blockInfo.code)" // "",
	"\(.pMessage)" // "",
	"\(.message.code)" // "",
	([ .varFields[] |select(.fieldTag=="x") | "\(.content)" ] |join("; ")) // "",
	"\(.moneyOwed)" // ""
] |join("|")' |tr -d '"' |tr -d "'" |sed 's#|null|#||#g' > patrons.tmp

function fixname() {
	fname=""
	lname=""
	mname=""
	pname=""

	#### Pull preferred names out of parens 
	if [[ ${name} =~ "("  ]]; then
		pname=$(echo "${name}" |sed -n 's/[^(]*(\(.*\)).*/\1/p')
		name=$(echo "${name}" |sed 's/(.*)//')	
		fi

	#### Remove leading and trailing whitespace and commas preceding titles
	name=$(echo "$name" | xargs | sed -E 's/, (I*|[SJ]r)\.$/ \1/' |xargs)

	#### Look for inverted names
	IFS=',' read -r -a cnamearr <<< "${name}"

	if [[ ${#cnamearr[@]} > 1 ]]; then
		fname=$(sed 's/^ *\(.*\) *.*/\1/' <<< ${cnamearr[1]})
		mname=$(sed "s/${fname} *//" <<< ${cnamearr[1]})
		lname=${cnamearr[0]}
	else
		#### names in direct order
		if [[ ${name} =~ " "  ]]; then
			fname=$(sed -n 's/^\([^ ]*\).*/\1/p' <<< ${name})
			mname=$(sed -n 's/.* \(.*\) .*/\1/p' <<< ${name})
			lname=$(sed -n 's/.* //p' <<< ${name})
		fi
	fi
			
	#### deal with one word last name
	if [[ -z ${lname} ]]; then lname="${name}";fi

}

function fixaddress() {
	addIndex=$1		
	
	city=""
	zip=""
	state=""
	statezip=""
	addr1=""
	addr2=""
	addr3=""

	case "$addIndex" in
		"0")
			addr1="${taddr1}"
			addr2="${taddr2}"
			addr3="${taddr3}"
			;;
		"1")
			addr1="${paddr1}"
			addr2="${paddr2}"
			addr3="${paddr3}"
			;;
		*)
			addr1="${taddr1}"
			addr2="${taddr2}"
			addr3="${taddr3}"
			;;
	esac


	## Hope for the city followed by a comma followed by state and zip
	## If comma not found or if it doesn't look like something that ends in a zip
	## then leave everything as it is

	citystatezip=$addr3

	if [[ ${addr3} == "" ]]; then citystatezip=$addr2;addr2="";fi

	IFS=',' read city statezip <<< ${citystatezip}

	IFS=' ' read -r -a statezip <<< "${citystatezip}"

	if [[ ${#statezip[@]} > 1 ]]; then
		if [[ ${statezip[-1]} =~ ^[0-9\-]*$ ]]; then
			zip=${statezip[-1]} 
			state=${statezip[-2]}
			citystatezip=""
		fi
	fi

	if [[ ${zip} == "" ]]; then
		IFS=' ' read -r -a city state zip <<< "${citystatezip}"

		if ! [[ ${zip} =~ ^[0-9\-]*$ ]]; then
			city=""
			state=""
			zip=""
		fi
	fi

	if [[ $zip == "" ]]; then addr2="${citystatezip}";fi
		
	case "$addIndex" in
		"0")
			taddr1="${addr1}"
			taddr2="${addr2}"
			tcity="${city}"
			tstate="${state}"
			tzip="${zip}"
			;;
		"1")
			paddr1="${addr1}"
			paddr2="${addr2}"
			pcity="${city}"
			pstate="${state}"
			pzip="${zip}"
			;;
		*)
			taddr1="${addr1}"
			taddr2="${addr2}"
			tcity="${city}"
			tstate="${state}"
			tzip="${zip}"
			;;
	esac

	city=$(sed "s/${state} ${zip}//" <<< ${city}) 
}


echo -e "id\tbarcode\texternalid\tusername\tdepartment\tfname\tmname\tlname\tpname\temail\tptype\ttaddrtype\ttaddr1\ttaddr2\ttcity\ttstate\ttzip\tpphone\ttphone\tpaddrtype\tpaddr1\tpaddr2\tpcity\tpstate\tpzip\tpphone\tptype\tblock\tpmessage\tmessagecode\tnotes\towed\tcreated\texpiration" > ${outfile}


SECONDS=0
counter=0

while IFS=$'\n' read -r line; do
	#### remove "-" values which indicate defaults
	line=$(sed 's/|-/|/g' <<< ${line})

	timer=$SECONDS
	IFS='|' read id barcode externalid username department created expiration email taddrtype taddr1 taddr2 taddr3 paddrtype paddr1 paddr2 paddr3 name tphone pphone ptype block pmessage messagecode notes owed <<< $line 

	if ! [[ ${email} =~ @.*\.(edu|gov|com|net) ]];then email=${emaildefault};fi

	#taddrtype=${addtype[${taddrtype}]}
	#paddrtype=${addtype[${paddrtype}]}
	# ignore included values because multiple primary addresses or no primary addresses encoded
	taddrtype=${addtypedefault}
	paddrtype=${addtypedefault2}

	fixname
	fixaddress "0"
	fixaddress "1"

	#ptype=${groups[${ptype}]}
	## remap hyphen because can't be key for array
	if  [[ ${department}=="-" ]];then department="z";fi
	department=${departments[${department}]}

	counter=$((${counter} + 1))
	if [[ $((${counter}%100)) == 0 ]];then echo -en "${counter} records processed in ${timer} seconds\r"; fi

	if [[ ${emaildefaultforall}=="1" ]];then email=${emaildefault};fi

	echo -e "${id}\t${barcode}\t${externalid}\t${username}\t${department}\t${fname}\t${mname}\t${lname}\t${pname}\t${email}\t${ptype}\t${taddrtype}\t${taddr1}\t${taddr2}\t${tcity}\t${tstate}\t${tzip}\t${tphone}\t${pphone}\t${paddrtype}\t${paddr1}\t${paddr2}\t${pcity}\t${pstate}\t${pzip}\t${pphone}\t${ptype}\t${block}\t${pmessage}\t${messagecode}\t${notes}\t${owed}\t${created}\t${expiration}" >> ${outfile}


done < patrons.tmp

rm patrons.tmp

echo



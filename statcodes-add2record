#!/usr/bin/bash
auth 2>/dev/null || authn 2>/dev/null
# Script expects a delimited file with name of agreement in first column and name of license in second colum

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

declare -A statcode_dict

infile="statcodes.tsv"
recordtype="${1}"

if [[ $recordtype != "item" && $recordtype != "instance" ]]; then
	echo "Usage statcodes-add2record [recordtype]"       
	echo "Record type must be instance or item"
	echo
	exit
fi

counter=1
numrecs=$(wc -l ${infile} |sed 's/ .*//')

apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/statistical-codes?limit=10000")

# load licenses into scalar array keyed by downcased name
eval "$(echo ${apicall} |jq -r '.statisticalCodes[] | @sh "statcode_dict[\(.code|tostring)]=\(.id|tostring)"')"

while IFS=$'\t' read -r record_uuid stat1 stat2;do

printf "Processing record %s of %s\r" $counter, $numrecs

record=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${recordtype}-storage/${recordtype}s/${record_uuid}")

stat1_uuid="${statcode_dict[${stat1}]}"
if [[ ${stat2_uuid} ~ [a-f0-9] ]];then stat2_uuid="${statcode_dict[${stat2}]}";fi

if [[ ${stat1_uuid} =~ [a-z0-9] ]];then record=$(echo "${record}" | jq ".statisticalCodeIds = [\"${stat1_uuid}\"]");fi
if [[ ${stat2_uuid} =~ [a-z0-9] ]];then record=$(echo "${record}" | jq ".statisticalCodeIds += [\"${stat2_uuid}\"]");fi

curl --http1.1 -s -w '\n' -X PUT -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${record}" "${okapi_url}/${recordtype}-storage/${recordtype}s/${record_uuid}"

counter=$(($counter + 1))
	
done < ${infile}

echo "Finished process $numrecs records        "


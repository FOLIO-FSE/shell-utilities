auth 2>/dev/null || authn 2>/dev/null

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

build_post() {
IFS='' read -r -d '' data << EndOfJSON
{
  "scope": "user",
  "userId": "${user_uuid}"
}
EndOfJSON
echo $data
}

post_data() {

apicall=$(curl --http1.1 -s -w '\n' -X POST -H "Content-type: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" -d "${data}" "${okapi_url}/automated-patron-blocks/synchronization/job")

echo $apicall
}

search_for="$1"

barcodefound=0

if [[ ${search_for} =~ ^[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*-[0-9a-f]*$ ]];then
        endpoint="${okapi_url}/users/${search_for}"
else
        endpoint="${okapi_url}/users?query=barcode==${search_for}"
        barcodefound=1
fi

apicall=$(curl -s -w '\n' -X GET -D \
  -H "Accept: application/json" \
  -H "X-Okapi-Tenant: ${tenant}" \
  -H "x-okapi-token: ${okapi_token}" \
  "${endpoint}")

if [[ ${barcodefound} -eq 1 ]];then
        apicall=$(echo $apicall |jq '.users[0]')
        user_uuid=$(echo $apicall |jq -r .id)
else
	user_uuid=${search_for}
fi


if [[ ${user_uuid} =~ [a-f0-9\-] ]];then 
	data=$(build_post)
	output=$(post_data)
	echo $output

	apicall=$(curl -s -w '\n' -X GET -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" ${okapi_url}/automated-patron-blocks/${user_uuid})

	echo $apicall | jq .
else

while IFS=$'\n' read -r user_uuid; do

user_uuid=$(tr -dc "[a-f0-9\-]" <<< $user_uuid)
data=$(build_post)
output=$(post_data)
echo $output

done < outfile
fi

tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

search="${1,,}"

if [[ ${search} == "" ]];then echo "You must supply some input";exit;fi

function showmatches() {

	local matchtype="${1}"
	local endpoint
	local jq

	jq=".${matchtype}[] | select((.name |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .name] |@tsv"

	case $matchtype in
	"acquisitionsUnits")
		endpoint="acquisitions-units/units"
        ;;
	"addressTypes")
		endpoint="addresstypes"
		jq=".${matchtype}[] | select((.addressType  |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .addressType ] |@tsv"
        ;;
	"cancellationReasons")
		endpoint="cancellation-reason-storage/cancellation-reasons"
        ;;
	"callNumberTypes")
		endpoint="call-number-types"
        ;;
	"categories")
		endpoint="organizations-storage/categories"
		jq=".${matchtype}[] | select((.value |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .value] |@tsv"
        ;;
	"contributorTypes")
		endpoint="contributor-types"
		jq="code_name"
        ;;
	"courseDepartments")
		endpoint="coursereserves/departments"
		jq=".departments[] | select((.name |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"courseDepartments\", .id, .name] |@tsv"
        ;;
	"courseTerms")
		endpoint="coursereserves/terms"
		jq=".terms[] | select((.name |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"courseTerms\", .id, .name] |@tsv"
        ;;
	"departments")
		endpoint="departments"
		jq="code_name"
        ;;
	"feefineowners")
		endpoint="owners"
		jq=".owners[].servicePointOwner[] | select((.label  |ascii_downcase |contains(\"${search}\")) or (.value == \"${search}\")) | [\"feefineowners\", .value, .label] |@tsv"
        ;;
	"fiscalYears")
		endpoint="finance/fiscal-years"
		jq="code_name"
        ;;
	"holdingsRecordsSources")
		endpoint="holdings-sources"
        ;;
	"holdingsTypes")
		endpoint="holdings-types"
        ;;
	"identifierTypes")
		endpoint="identifier-types"
        ;;
	"instanceRelationshipTypes")
		endpoint="instance-relationship-types"
        ;;
	"instanceNoteTypes")
		endpoint="instance-note-types"
        ;;
	"instanceStatuses")
		endpoint="instance-statuses"
        ;;
	"instanceTypes")
		endpoint="instance-types"
        ;;
	"holdingsNoteTypes")
		endpoint="holdings-note-types"
        ;;
	"instanceFormats")
		endpoint="instance-formats"
        ;;
	"itemNoteTypes")
		endpoint="item-note-types"
        ;;
	"ledgers")
		endpoint="finance/ledgers"
		jq="code_name"
        ;;
	"loanPolicies")
		endpoint="loan-policy-storage/loan-policies"
        ;;
	"loantypes")
		endpoint="loan-types"
        ;;
	"locations")
		endpoint="locations"
		jq="code_name"
        ;;
	"loccamps")
		endpoint="location-units/campuses"
		jq="code_name"
        ;;
	"locinsts")
		endpoint="location-units/institutions"
		jq="code_name"
        ;;
	"loclibs")
		endpoint="location-units/libraries"
		jq="code_name"
        ;;
	"mtypes")
		endpoint="material-types"
        ;;
	"noteTypes")
		endpoint="note-types"
        ;;
	"servicepoints")
		endpoint="service-points"
		jq="code_name"
        ;;
	"statisticalCodes")
		endpoint="statistical-codes"
		jq="code_name"
        ;;
	"usergroups")
		endpoint="groups"
		jq=".${matchtype}[] | select((.group  |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .group] |@tsv"
        ;;
	*)
		echo "No matching endpoint could be found. Quitting"
		exit	
        ;;
	esac

	if [[ ${jq} == "code_name" ]];then 
		jq=".${matchtype}[] | select((.name |ascii_downcase |contains(\"${search}\"))  or (.code | ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .code,.name] |@tsv"
	fi
		

	output=$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?query=cql.allRecords=1&limit=5000" \
		|jq -r "${jq}") 
		echo -e "${output}" |grep [a-z] && echo


}


echo "Downloading data for  acq units, address types, call number types, cancellation reasons, categories, contributor types, course departments, courses, fee/fine owners, fiscal years, holdings note types, holdings record sources, holdings types, identifier types, instance formats, instance note types, instance relationship types, instance statuses, instance types, item material types, item note types, ledgers, loan policies, loan types, locations, location institutions, location campuses, location libraries, note types, service points, statcodes, and usergroups"

rec_array=("acquisitionsUnits" "addressTypes" "callNumberTypes" "cancellationReasons" "categories" "contributorTypes" "courseDepartments" "courseTerms" "departments" "feefineowners" "fiscalYears" "holdingsNoteTypes" "holdingsRecordsSources" "holdingsTypes" "identifierTypes" "instanceFormats" "instanceNoteTypes" "instanceRelationshipTypes" "instanceStatuses" "instanceTypes" "itemNoteTypes" "ledgers" "loanPolicies" "loantypes" "locations" "locinsts" "loccamps" "loclibs" "mtypes" "noteTypes" "servicepoints" "statisticalCodes" "usergroups")

counter=1
for rec_type in "${rec_array[@]}";do
	showmatches ${rec_type} &
	if [[ $(($counter % 10)) -eq 0 ]];then wait;fi
	counter=$(($counter + 1))
done

wait



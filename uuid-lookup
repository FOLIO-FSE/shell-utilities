tenant=$(cat tenant)
okapi_url=$(cat okapi.url)
okapi_token=$(cat okapi.token)

search="${1,,}"

if [[ ${search} == "" ]];then echo "You must supply some input";exit;fi

function showmatches() {

	local matchtype="${1}"
	local endpoint
	local jq

	jq=".${matchtype}[] | select((.name |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .name] |@tsv"

	case $matchtype in
	"cancellationReasons")
		endpoint="cancellation-reason-storage/cancellation-reasons"
        ;;
	"callNumberTypes")
		endpoint="call-number-types"
        ;;
	"holdingsRecordsSources")
		endpoint="holdings-sources"
        ;;
	"holdingsTypes")
		endpoint="holdings-types"
        ;;
	"identifierTypes")
		endpoint="identifier-types"
        ;;
	"instanceNoteTypes")
		endpoint="instance-note-types"
        ;;
	"instanceTypes")
		endpoint="instance-types"
        ;;
	"holdingsNoteTypes")
		endpoint="holdings-note-types"
        ;;
	"instanceFormats")
		endpoint="instance-formats"
        ;;
	"itemNoteTypes")
		endpoint="item-note-types"
        ;;
	"loanPolicies")
		endpoint="loan-policy-storage/loan-policies"
        ;;
	"loantypes")
		endpoint="loan-types"
        ;;
	"locations")
		endpoint="locations"
		jq="code_name"
        ;;
	"mtypes")
		endpoint="material-types"
        ;;
	"owners")
		endpoint="owners"
		jq=".${matchtype}[] | select((.owner  |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .owner] |@tsv"
        ;;
	"statisticalCodes")
		endpoint="statistical-codes"
		jq="code_name"
        ;;
	"usergroups")
		endpoint="groups"
		jq=".${matchtype}[] | select((.group  |ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .group] |@tsv"
        ;;
	*)
		echo "No matching endpoint could be found. Quitting"
		exit	
        ;;
	esac

	if [[ ${jq} == "code_name" ]];then 
		jq=".${matchtype}[] | select((.name |ascii_downcase |contains(\"${search}\"))  or (.code | ascii_downcase |contains(\"${search}\")) or (.id == \"${search}\")) | [\"${matchtype}\", .id, .code,.name] |@tsv"
	fi
		

	output=$(curl -s -w '\n' -X GET -D -H "Accept: application/json" -H "X-Okapi-Tenant: ${tenant}" -H "x-okapi-token: ${okapi_token}" "${okapi_url}/${endpoint}?query=cql.allRecords=1&limit=5000" \
		|jq -r "${jq}") 
		echo -e "${output}" |grep [a-z] && echo


}


echo "Downloading data for cancellation reasons, call number types, fee/fine owners, identifier types, item note types, instance note types, holdings record sources, holdings note types, holdings types, instance formats, instance types, item material types, loan policies, loan types, usergroups, statcodes, and locations."

rec_array=("cancellationReasons" "callNumberTypes"  "locations"  "loanPolicies" "loantypes"  "identifierTypes"  "instanceFormats"  "instanceTypes"  "instanceNoteTypes"  "holdingsRecordsSources" "holdingsNoteTypes" "holdingsTypes"  "itemNoteTypes"  "mtypes" "owners"  "statisticalCodes"  "usergroups")

for rec_type in "${rec_array[@]}";do
	showmatches ${rec_type} &
done
wait


